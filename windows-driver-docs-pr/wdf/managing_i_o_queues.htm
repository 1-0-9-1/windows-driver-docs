<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:mssdk="winsdk" xmlns:script="urn:script" xmlns:build="urn:build" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="Description" content="Managing I/O Queues"/>
<meta name="MSHAttr" content="PreferredSiteName:MSDN"/>
<meta name="MSHAttr" content="PreferredLib:/library/windows/hardware"/>
<title>Managing I/O Queues</title>

<meta name="MS-HAID" content="Ch3_DFIoPackage_f37c3830-4d37-4862-a5bd-360478f6cb8e.xml"/>
<meta name="MS-HAID" content="kmdf.managing_i_o_queues"/>
<meta name="MS-HAID" content="wdf.managing_i_o_queues"/>


<link rel="STYLESHEET" type="text/css" HREF="../common/backsdk4.css"/>


</head>
<body>

<div id="mainSection">
<div class="clsServerSDKContent">
<h1><a id="wdf.managing_i_o_queues"></a>Managing I/O Queues</h1>
</div>
<div class="nav_sidebar" style="background: #ebeff0; border: 1px #e3e3e3 solid; padding: 5px; float: right; margin-left: 10px; width: 290px;"><span class="sidebar_heading" style="font-weight: bold;">In this article</span><div class="sidebar_toc">
<p>
<ul>
<li><a href="#starting_an_i_o_queue">
      Starting an I/O Queue</a></li>
<li><a href="#stopping_and_restarting_an_i_o_queue">
      Stopping and Restarting an I/O Queue</a></li>
<li><a href="#adding_requests_to_an_i_o_queue">
      Adding Requests to an I/O Queue</a></li>
<li><a href="#obtaining_requests_from_an_i_o_queue">
      Obtaining Requests from an I/O Queue</a></li>
<li><a href="#searching_for_an_i_o_request">
      Searching for an I/O Request</a></li>
<li><a href="#purging_or_draining_an_i_o_queue">
      Purging or Draining an I/O Queue</a></li>
<li><a href="#moving_requests_from_one_i_o_queue_to_another">
      Moving Requests from One I/O Queue to Another</a></li>
<li><a href="#intercepting_an_i_o_request_before_it_is_queued">
      Intercepting an I/O Request before it is Queued</a></li>
<li><a href="#obtaining_i_o_queue_properties">
      Obtaining I/O Queue Properties</a></li>
</ul>
</p>
</div>
</div>
<p></p>
<h2><a id="starting_an_i_o_queue"></a><a id="STARTING_AN_I_O_QUEUE"></a>
      Starting an I/O Queue</h2>
<p>When a driver calls <a href="wdf.wdfioqueuecreate"><b>WdfIoQueueCreate</b></a> to create an I/O queue, the framework automatically enables the queue to receive I/O requests and to deliver them to a driver. </p>
<p>Drivers typically call <a href="wdf.wdfioqueuecreate"><b>WdfIoQueueCreate</b></a> from within an <a href="wdf.evtdriverdeviceadd"><i>EvtDriverDeviceAdd</i></a> callback function. The framework can begin delivering I/O requests to the driver after the driver's <i>EvtDriverDeviceAdd</i> callback function returns.</p>
<p>If your driver is using <a href="using_power_managed_i_o_queues.htm">power-managed</a> I/O queues, the framework cannot begin delivering requests to your driver until the device enters its working state and the framework has called the driver's <a href="wdf.evtdeviced0entry"><i>EvtDeviceD0Entry</i></a> callback function.</p>
<h2><a id="stopping_and_restarting_an_i_o_queue"></a><a id="STOPPING_AND_RESTARTING_AN_I_O_QUEUE"></a>
      Stopping and Restarting an I/O Queue</h2>
<p>Your driver can call <a href="wdf.wdfioqueuestop"><b>WdfIoQueueStop</b></a> or <a href="wdf.wdfioqueuestopsynchronously"><b>WdfIoQueueStopSynchronously</b></a> to temporarily prevent the framework from delivering I/O requests from an I/O queue. To resume delivery of I/O requests, the driver calls <a href="wdf.wdfioqueuestart"><b>WdfIoQueueStart</b></a>.</p>
<p>If your driver uses power-managed I/O queues, the framework automatically stops a device's queues when the device leaves its working (D0) state, and the framework restarts the queues when the device state returns to D0.</p>
<h2><a id="adding_requests_to_an_i_o_queue"></a><a id="ADDING_REQUESTS_TO_AN_I_O_QUEUE"></a>
      Adding Requests to an I/O Queue</h2>
<p>When the system sends a read, write, or device I/O control request to a driver, the framework places the request in an I/O queue. The driver can control the types of requests that the framework stores in each queue by calling <a href="wdf.wdfdeviceconfigurerequestdispatching"><b>WdfDeviceConfigureRequestDispatching</b></a>.</p>
<p>A driver can also requeue requests that it has received from the framework, by calling <a href="wdf.wdfrequestforwardtoioqueue"><b>WdfRequestForwardToIoQueue</b></a>.</p>
<h2><a id="obtaining_requests_from_an_i_o_queue"></a><a id="OBTAINING_REQUESTS_FROM_AN_I_O_QUEUE"></a>
      Obtaining Requests from an I/O Queue</h2>
<p>If a driver specifies the sequential or the parallel <a href="dispatching_methods_for_i_o_requests.htm">dispatching method</a> for an I/O queue, it receives requests in <a href="request_handlers.htm">request handlers</a>. </p>
<p>If a driver specifies the manual or sequential dispatching method, it can obtain requests by calling <a href="wdf.wdfioqueueretrievenextrequest"><b>WdfIoQueueRetrieveNextRequest</b></a> or <a href="wdf.wdfioqueueretrieverequestbyfileobject"><b>WdfIoQueueRetrieveRequestByFileObject</b></a>.</p>
<h2><a id="searching_for_an_i_o_request"></a><a id="SEARCHING_FOR_AN_I_O_REQUEST"></a>
      Searching for an I/O Request</h2>
<p>If a driver specifies the manual <a href="dispatching_methods_for_i_o_requests.htm">dispatching method</a> for an I/O queue, it can use the following steps to search for particular requests in the queue:</p>
<ol>
<li>
<p>Call <a href="wdf.wdfioqueuefindrequest"><b>WdfIoQueueFindRequest</b></a> to locate a request that matches driver-specified criteria.</p>
</li>
<li>
<p>Call <a href="wdf.wdfioqueueretrievefoundrequest"><b>WdfIoQueueRetrieveFoundRequest</b></a> to retrieve the request that <a href="wdf.wdfioqueuefindrequest"><b>WdfIoQueueFindRequest</b></a> located.</p>
</li>
</ol>
<h2><a id="purging_or_draining_an_i_o_queue"></a><a id="PURGING_OR_DRAINING_AN_I_O_QUEUE"></a>
      Purging or Draining an I/O Queue</h2>
<p><i>Purging</i> an I/O queue means stopping insertion of I/O requests into the queue and canceling any requests that are already in the queue.</p>
<p><i>Draining</i> an I/O queue means stopping insertion of I/O requests into the queue, while allowing any requests that are already in the queue to be delivered to the driver.</p>
<p>Drivers typically purge or drain their queues only if the queues are not power-managed. For power-managed I/O queues, drivers can provide <a href="wdf.evtiostop"><i>EvtIoStop</i></a> and <a href="wdf.evtioresume"><i>EvtIoResume</i></a> callback functions.</p>
<p>If some of your driver's queues are not power-managed, you might want to purge or drain a queue if its associated device or I/O channel becomes unavailable. Typically, you will purge, instead of drain, a queue unless there is a high likelihood that each request contains very important information. For example, a driver for a network device might purge its queues, while a driver for a storage device would likely drain its queues.</p>
<p>If you want your driver to purge or drain an I/O queue, the driver can call one of the following queue object methods:</p>
<ul>
<li>
<p><a href="wdf.wdfioqueuepurge"><b>WdfIoQueuePurge</b></a> or <a href="wdf.wdfioqueuepurgesynchronously"><b>WdfIoQueuePurgeSynchronously</b></a>, to stop queuing I/O requests to an I/O queue and to cancel unprocessed requests.</p>
</li>
<li>
<p><a href="wdf.wdfioqueuedrain"><b>WdfIoQueueDrain</b></a> or <a href="wdf.wdfioqueuedrainsynchronously"><b>WdfIoQueueDrainSynchronously</b></a>, to stop queuing I/O requests to an I/O queue while allowing already-queued requests to be delivered and processed.</p>
</li>
</ul>
<p>Exercise caution when calling <a href="wdf.wdfioqueuedrain"><b>WdfIoQueueDrain</b></a> and <a href="wdf.wdfioqueuedrainsynchronously"><b>WdfIoQueueDrainSynchronously</b></a>.  Because a drain operation waits for requests to be completed, you should only drain a queue if you are certain that the queue's pending requests will complete in a timely fashion. 

      If you do not know how long I/O requests will take to complete and it is acceptable to cancel outstanding requests, consider purging the queue.</p>
<h2><a id="moving_requests_from_one_i_o_queue_to_another"></a><a id="MOVING_REQUESTS_FROM_ONE_I_O_QUEUE_TO_ANOTHER"></a>
      Moving Requests from One I/O Queue to Another</h2>
<p>After your driver has received an I/O request, you might want the driver to requeue the request into a different I/O queue. To do this, the driver calls <a href="wdf.wdfrequestforwardtoioqueue"><b>WdfRequestForwardToIoQueue</b></a> or <a href="wdf.wdfrequestforwardtoparentdeviceioqueue"><b>WdfRequestForwardToParentDeviceIoQueue</b></a>, which adds the request to the tail of a specified queue. Eventually, the framework will deliver the request to the driver again by using the specified queue's dispatching method. For more information about moving I/O requests from one I/O queue to another, see <a href="requeuing_i_o_requests.htm">Requeuing I/O Requests</a>.</p>
<h2><a id="intercepting_an_i_o_request_before_it_is_queued"></a><a id="INTERCEPTING_AN_I_O_REQUEST_BEFORE_IT_IS_QUEUED"></a>
      Intercepting an I/O Request before it is Queued</h2>
<p>It is possible for a driver to intercept an I/O request before the framework places the request in an I/O queue. To intercept I/O requests, the driver must call <a href="wdf.wdfdeviceinitsetioincallercontextcallback"><b>WdfDeviceInitSetIoInCallerContextCallback</b></a> to register an <a href="wdf.evtioincallercontext"><i>EvtIoInCallerContext</i></a> callback function.</p>
<p>The framework associates the <a href="wdf.evtioincallercontext"><i>EvtIoInCallerContext</i></a> callback function with a device. As a result, the framework calls the <i>EvtIoInCallerContext</i> callback function every time it receives a request that the system is sending to the device. </p>
<p>Typically, when an <a href="wdf.evtioincallercontext"><i>EvtIoInCallerContext</i></a> callback function receives a request, it performs some preliminary processing for the request. Next, the callback function calls <a href="wdf.wdfdeviceenqueuerequest"><b>WdfDeviceEnqueueRequest</b></a>, which gives the request back to the framework. The framework can then place the request in the proper I/O queue, just as it would have if it had not called the <i>EvtIoInCallerContext</i> callback function.</p>
<p>The primary reason that a driver might provide an <a href="wdf.evtioincallercontext"><i>EvtIoInCallerContext</i></a> callback function is that the driver has to handle I/O operations that support the I/O method called <a href="wdf.accessing_data_buffers_in_kmdf_drivers#neither#neither">neither buffered nor direct I/O</a>. For this I/O method, the driver must access received buffers in the process context of the originator of the I/O request. For more information, see <a href="wdf.accessing_data_buffers_in_kmdf_drivers">Accessing Data Buffers in Framework-Based Drivers</a>.</p>
<h2><a id="obtaining_i_o_queue_properties"></a><a id="OBTAINING_I_O_QUEUE_PROPERTIES"></a>
      Obtaining I/O Queue Properties</h2>
<p>To obtain properties of a framework queue object, the driver can call the following methods:</p>
<ul>
<li>
<p><a href="wdf.wdfioqueuegetdevice"><b>WdfIoQueueGetDevice</b></a>, to obtain a handle to the device object that the queue object belongs to.</p>
</li>
<li>
<p><a href="wdf.wdfioqueuegetstate"><b>WdfIoQueueGetState</b></a>, to obtain <a href="i_o_queue_states.htm">state information</a> about the queue.</p>
</li>
</ul>
<p> </p>
<p> </p>
<p><a href="mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback [wdf\wdf]:%20Managing I/O Queues%20 RELEASE:%20(3/15/2016)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AWe use your feedback to improve the documentation. We don't use your email address for any other purpose, and we'll remove your email address from our system after the issue that you're reporting is fixed. While we're working to fix this issue, we might send you an email message to ask for more info. Later, we might also send you an email message to let you know that we've addressed your feedback.%0A%0AFor more info about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx." title="Send comments about this topic to Microsoft">Send comments about this topic to Microsoft</a></p>
</div>
<p style="text-align:left;font-family:Arial,sanserif;font-size:100%;color:black">
&#x00a9;&#x00a0;2016 Microsoft. All rights reserved.</p>

</body>
</html>
