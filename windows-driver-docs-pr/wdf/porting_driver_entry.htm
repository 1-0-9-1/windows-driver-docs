<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:mssdk="winsdk" xmlns:script="urn:script" xmlns:build="urn:build" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="Description" content="Porting DriverEntry"/>
<meta name="MSHAttr" content="PreferredSiteName:MSDN"/>
<meta name="MSHAttr" content="PreferredLib:/library/windows/hardware"/>
<title>Porting DriverEntry</title>

<meta name="MS-HAID" content="kmdf.porting_driver_entry"/>
<meta name="MS-HAID" content="wdf.porting_driver_entry"/>


<link rel="STYLESHEET" type="text/css" HREF="../common/backsdk4.css"/>


</head>
<body>

<div id="mainSection">
<div class="clsServerSDKContent">
<h1><a id="wdf.porting_driver_entry"></a>Porting DriverEntry</h1>
</div>
<p>In both WDM and framework-based drivers, the <a href="wdf.driverentry_for_kmdf_drivers"><b>DriverEntry</b></a> function is the primary entry point. The function prototype is the same in both models.
In a WDM driver, the system calls <b>DriverEntry</b> when the driver is first loaded into memory. DriverEntry sets a pointer to the driver’s <a href="kernel.adddevice"><i>AddDevice</i></a> routine in the <b>DriverExtension-&gt;AddDevice</b> field of the <a href="kernel.driver_object"><b>DRIVER_OBJECT</b></a> structure, sets pointers to its I/O dispatch routines in the <b>MajorFunction</b> array of the DRIVER_OBJECT structure, and then returns.
In a framework-based driver, the system calls the framework’s internal <b>FxDriverEntry</b> function upon loading the driver. This internal function initializes the framework and then calls the driver’s <b>DriverEntry</b> function. <b>DriverEntry</b> sets a pointer to the driver’s <a href="wdf.evtdriverdeviceadd"><i>EvtDriverDeviceAdd</i></a> callback and calls <a href="wdf.wdfdrivercreate"><b>WdfDriverCreate</b></a> to create the WDFDRIVER object, as the following example shows:
</p>
<div class="code"><span codelanguage=""><table>
<tr>
<th></th>
</tr>
<tr>
<td>
<pre>NTSTATUS
DriverEntry(
    IN PDRIVER_OBJECT  DriverObject
    IN PUNICODE_STRING RegistryPath
    )
{
    WDF_DRIVER_CONFIG_INIT( &amp;config,
                              ToasterEvtDeviceAdd );
    status = WdfDriverCreate(
                 DriverObject
                 RegistryPath
                 WDF_NO_OBJECT_ATTRIBUTES
                 &amp;config
                 WDF_NO_HANDLE
             );

    return STATUS_SUCCESS;
}
</pre>
</td>
</tr>
</table></span></div>
<p><b>DriverEntry</b> also initializes any global data or resources that the driver requires, such as creating a lookaside list or initializing tracing. Note that although <a href="wdf.wdfdrivercreate"><b>WdfDriverCreate</b></a> returns a handle to the WDFDRIVER object, the driver does not retain this handle, just as a WDM driver might not retain the DRIVER_OBJECT pointer that was passed to its <b>DriverEntry </b> routine. The reason is the same: only a few drivers use the pointer to the driver object.</p>
<p> </p>
<p> </p>
<p><a href="mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback [wdf\wdf]:%20Porting DriverEntry%20 RELEASE:%20(3/15/2016)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AWe use your feedback to improve the documentation. We don't use your email address for any other purpose, and we'll remove your email address from our system after the issue that you're reporting is fixed. While we're working to fix this issue, we might send you an email message to ask for more info. Later, we might also send you an email message to let you know that we've addressed your feedback.%0A%0AFor more info about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx." title="Send comments about this topic to Microsoft">Send comments about this topic to Microsoft</a></p>
</div>
<p style="text-align:left;font-family:Arial,sanserif;font-size:100%;color:black">
&#x00a9;&#x00a0;2016 Microsoft. All rights reserved.</p>

</body>
</html>
