<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:mssdk="winsdk" xmlns:script="urn:script" xmlns:build="urn:build" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="Description" content="Completing a DMA Transfer"/>
<meta name="MSHAttr" content="PreferredSiteName:MSDN"/>
<meta name="MSHAttr" content="PreferredLib:/library/windows/hardware"/>
<title>Completing a DMA Transfer</title>

<meta name="MS-HAID" content="DFDmaPackage_c7cbd77e-8008-48ac-bc1a-06bba70fe01b.xml"/>
<meta name="MS-HAID" content="kmdf.completing_a_dma_transfer"/>
<meta name="MS-HAID" content="wdf.completing_a_dma_transfer"/>


<link rel="STYLESHEET" type="text/css" HREF="../common/backsdk4.css"/>


</head>
<body>

<div id="mainSection">
<div class="clsServerSDKContent">
<h1><a id="wdf.completing_a_dma_transfer"></a>Completing a DMA Transfer</h1>
</div>
<p class="CCE_Message">[Applies to KMDF only]</p>
<h2><a id="ddk_completing_a_dma_transfer_df"></a><a id="DDK_COMPLETING_A_DMA_TRANSFER_DF"></a></h2>
<p>Typically, your driver's <a href="wdf.evtinterruptdpc"><i>EvtInterruptDpc</i></a> callback function completes the processing of each DMA transfer. </p>
<p>First, because multiple DMA transactions can be in progress concurrently, the <a href="wdf.evtinterruptdpc"><i>EvtInterruptDpc</i></a> callback function must determine which DMA transaction the completed transfer is associated with. The callback function can do this by retrieving the transaction handle that the driver stored when it <a href="starting_a_dma_transaction.htm">started the DMA transaction</a>.  To retrieve the device extension, the <a href="http://go.microsoft.com/fwlink/p/?linkid=256157">PLX9x5x</a> sample defines a function called <b>PLxGetDeviceContext</b> in its Private.h header file:</p>
<div class="code"><span codelanguage=""><table>
<tr>
<th></th>
</tr>
<tr>
<td>
<pre>WDF_DECLARE_CONTEXT_TYPE_WITH_NAME(DEVICE_EXTENSION, PLxGetDeviceContext)</pre>
</td>
</tr>
</table></span></div>
<p>Then, in the driver's <a href="wdf.evtinterruptdpc"><i>EvtInterruptDpc</i></a> callback, it does the following:</p>
<div class="code"><span codelanguage=""><table>
<tr>
<th></th>
</tr>
<tr>
<td>
<pre>WDFDMATRANSACTION   dmaTransaction;
PDEVICE_EXTENSION   devExt;
...
devExt  = PLxGetDeviceContext(WdfInterruptGetDevice(Interrupt));
...
dmaTransaction = devExt-&gt;WriteDmaTransaction;</pre>
</td>
</tr>
</table></span></div>
<p>Next, the <a href="wdf.evtinterruptdpc"><i>EvtInterruptDpc</i></a> callback function must inform the framework that a transfer is complete, by calling one of the following transfer completion methods:</p>
<ul>
<li>
<p><a href="wdf.wdfdmatransactiondmacompleted"><b>WdfDmaTransactionDmaCompleted</b></a>, if the transfer completed successfully and the hardware does not report a count of transferred bytes.</p>
</li>
<li>
<p><a href="wdf.wdfdmatransactiondmacompletedwithlength"><b>WdfDmaTransactionDmaCompletedWithLength</b></a>, if the transfer completed successfully and the hardware reports a count of transferred bytes (or a count of bytes not transferred), or if the driver detected an error and specifies a transfer count of zero to retry the transfer. If the driver specifies a transfer count of zero, the framework subtracts zero from the number of bytes that remain and thus sends the same transfer to the <a href="wdf.evtprogramdma"><i>EvtProgramDma</i></a> callback function.</p>
</li>
<li>
<p><a href="wdf.wdfdmatransactiondmacompletedfinal"><b>WdfDmaTransactionDmaCompletedFinal</b></a>, if the hardware reports an underrun or failure condition.</p>
</li>
</ul>
<p>Your driver can call <a href="wdf.wdfdmatransactiongetcurrentdmatransferlength"><b>WdfDmaTransactionGetCurrentDmaTransferLength</b></a> to obtain the original length of the completed transfer. This call is useful if your device reports a count of bytes that were not transferred, because the driver can subtract the number of non-transferred bytes from the original transfer length and then call <b>WdfDmaTransactionGetCurrentDmaTransferLength</b> to report the actual transfer size.</p>
<p>Each of the preceding transfer completion methods informs the framework that a single <a href="dma_transactions_and_dma_transfers.htm">DMA transfer</a> (not the entire <a href="dma_transactions_and_dma_transfers.htm">DMA transaction</a>) is complete. After your driver calls one of these methods, the driver checks the method's return value to see if the transaction requires more transfers:</p>
<ul>
<li>
<p>If the completion method's return value is <b>FALSE</b>, the framework has determined that additional DMA transfers are required to finish processing the DMA transaction. </p>
<p>Typically, the driver's <a href="wdf.evtinterruptdpc"><i>EvtInterruptDpc</i></a> callback function just returns. The framework calls the driver's <a href="wdf.evtprogramdma"><i>EvtProgramDma</i></a> callback function again, and the callback function can program the hardware for the next transfer.</p>
<p>The transfer completion methods provide a status value, which is always STATUS_MORE_PROCESSING_REQUIRED in this case.</p>
</li>
<li>
<p>If the return value is <b>TRUE</b>, no more transfers will occur for the DMA transaction. </p>
<p>The transfer completion methods provide a status value. If the status value is STATUS_SUCCESS, all transfers for the DMA transaction are complete and the driver must <a href="completing_a_dma_transaction.htm">complete the DMA transaction</a>. If the status value is anything else, an error occurred and the DMA transaction might not have been completed.</p>
</li>
</ul>
<p> If the <a href="wdf.evtinterruptdpc"><i>EvtInterruptDpc</i></a> callback function detects an error, typically due to a timer expiring or a hardware interrupt signaling a transfer error, the driver can  restart the transaction's current transfer.</p>
<p>To restart the transaction's current transfer, the driver's <a href="wdf.evtinterruptdpc"><i>EvtInterruptDpc</i></a>          callback function can call <a href="wdf.wdfdmatransactiondmacompletedwithlength"><b>WdfDmaTransactionDmaCompletedWithLength</b></a> with the <i>TransferredLength</i> parameter set to zero.</p>
<p> </p>
<p> </p>
<p><a href="mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback [wdf\wdf]:%20Completing a DMA Transfer%20 RELEASE:%20(3/15/2016)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AWe use your feedback to improve the documentation. We don't use your email address for any other purpose, and we'll remove your email address from our system after the issue that you're reporting is fixed. While we're working to fix this issue, we might send you an email message to ask for more info. Later, we might also send you an email message to let you know that we've addressed your feedback.%0A%0AFor more info about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx." title="Send comments about this topic to Microsoft">Send comments about this topic to Microsoft</a></p>
</div>
<p style="text-align:left;font-family:Arial,sanserif;font-size:100%;color:black">
&#x00a9;&#x00a0;2016 Microsoft. All rights reserved.</p>

</body>
</html>
