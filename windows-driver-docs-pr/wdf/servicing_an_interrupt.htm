<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:mssdk="winsdk" xmlns:script="urn:script" xmlns:build="urn:build" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="Description" content="Servicing an Interrupt"/>
<meta name="MSHAttr" content="PreferredSiteName:MSDN"/>
<meta name="MSHAttr" content="PreferredLib:/library/windows/hardware"/>
<title>Servicing an Interrupt</title>

<meta name="MS-HAID" content="Ch8_DFTechniques_3e9296f9-d8bb-4990-8602-760b37cd980a.xml"/>
<meta name="MS-HAID" content="kmdf.servicing_an_interrupt"/>
<meta name="MS-HAID" content="wdf.servicing_an_interrupt"/>


<link rel="STYLESHEET" type="text/css" HREF="../common/backsdk4.css"/>


</head>
<body>

<div id="mainSection">
<div class="clsServerSDKContent">
<h1><a id="wdf.servicing_an_interrupt"></a>Servicing an Interrupt</h1>
</div>
<p>This topic describes how to service a DIRQL interrupt. For information about servicing a passive-level interrupt, see <a href="supporting_passive_level_interrupts.htm#servicing">Supporting Passive Level Interrupts</a>.</p>
<p>Servicing an interrupt consists of two, and sometimes three, steps:</p>
<ol>
<li>
<p>Saving volatile information (such as register contents) quickly, in an interrupt service routine that runs at IRQL = DIRQL. </p>
</li>
<li>
<p>Processing the saved volatile information in a deferred procedure call (DPC) that runs at IRQL = DISPATCH_LEVEL.</p>
</li>
<li>
<p>Performing additional work at IRQL = PASSIVE_LEVEL, if necessary.</p>
</li>
</ol>
<p>When a device generates a hardware interrupt, the framework calls the driver's interrupt service routine (ISR), which framework-based drivers implement as an <a href="wdf.evtinterruptisr"><i>EvtInterruptIsr</i></a> callback function. </p>
<p>The DIRQL, must quickly save interrupt information, such as register contents, that will be lost if another interrupt occurs.</p>
<p>Typically, the <a href="wdf.evtinterruptisr"><i>EvtInterruptIsr</i></a> callback function schedules a deferred procedure call (DPC) to process the saved information later at a lower IRQL (DISPATCH_LEVEL). Framework-based drivers implement DPC routines as <a href="wdf.evtinterruptdpc"><i>EvtInterruptDpc</i></a> or <a href="wdf.evtdpcfunc"><i>EvtDpcFunc</i></a> callback functions. </p>
<p>Most drivers use a single <a href="wdf.evtinterruptdpc"><i>EvtInterruptDpc</i></a> callback function for each type of interrupt. To schedule execution of an <i>EvtInterruptDpc</i> callback function, a driver must call <a href="wdf.wdfinterruptqueuedpcforisr"><b>WdfInterruptQueueDpcForIsr</b></a> from within the <a href="wdf.evtinterruptisr"><i>EvtInterruptIsr</i></a> callback function.</p>
<p>If your driver creates multiple <a href="framework_queue_objects.htm">framework queue objects</a> for each device, you might consider using a separate <a href="wdf.wdf_dpc_object_reference">DPC object</a> and <a href="wdf.evtdpcfunc"><i>EvtDpcFunc</i></a> callback function for each queue. To schedule execution of an <i>EvtDpcFunc</i> callback function, the driver must first create one or more DPC objects by calling <a href="wdf.wdfdpccreate"><b>WdfDpcCreate</b></a>, typically in the driver's <a href="wdf.evtdriverdeviceadd"><i>EvtDriverDeviceAdd</i></a> callback function. Then the driver's <a href="wdf.evtinterruptisr"><i>EvtInterruptIsr</i></a> callback function can call <a href="wdf.wdfdpcenqueue"><b>WdfDpcEnqueue</b></a>.</p>
<p>Drivers typically <a href="completing_i_o_requests.htm">complete I/O requests</a> in their <a href="wdf.evtinterruptdpc"><i>EvtInterruptDpc</i></a> or <a href="wdf.evtdpcfunc"><i>EvtDpcFunc</i></a> callback functions.</p>
<p>Sometimes a driver must perform some interrupt-servicing operations at IRQL = PASSIVE_LEVEL. In such cases the driver's <a href="wdf.evtinterruptdpc"><i>EvtInterruptDpc</i></a> or <a href="wdf.evtdpcfunc"><i>EvtDpcFunc</i></a> callback function, executing at IRQL = DISPATCH_LEVEL, can schedule execution of one or more <a href="using_framework_work_items.htm">framework work items</a>, which run at IRQL = PASSIVE_LEVEL.</p>
<p>For an example of a driver that uses work items while servicing device interrupts, see the <a href="sample_kmdf_drivers.htm">PCIDRV</a> sample driver.</p>
<p> </p>
<p> </p>
<p><a href="mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback [wdf\wdf]:%20Servicing an Interrupt%20 RELEASE:%20(3/15/2016)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AWe use your feedback to improve the documentation. We don't use your email address for any other purpose, and we'll remove your email address from our system after the issue that you're reporting is fixed. While we're working to fix this issue, we might send you an email message to ask for more info. Later, we might also send you an email message to let you know that we've addressed your feedback.%0A%0AFor more info about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx." title="Send comments about this topic to Microsoft">Send comments about this topic to Microsoft</a></p>
</div>
<p style="text-align:left;font-family:Arial,sanserif;font-size:100%;color:black">
&#x00a9;&#x00a0;2016 Microsoft. All rights reserved.</p>

</body>
</html>
