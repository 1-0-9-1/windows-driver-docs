<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:mssdk="winsdk" xmlns:script="urn:script" xmlns:build="urn:build" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="Description" content="Request Handlers"/>
<meta name="MSHAttr" content="PreferredSiteName:MSDN"/>
<meta name="MSHAttr" content="PreferredLib:/library/windows/hardware"/>
<title>Request Handlers</title>

<meta name="MS-HAID" content="Ch3_DFIoPackage_3978a0d8-8269-479c-bc18-30c506f83e42.xml"/>
<meta name="MS-HAID" content="kmdf.request_handlers"/>
<meta name="MS-HAID" content="wdf.request_handlers"/>


<link rel="STYLESHEET" type="text/css" HREF="../common/backsdk4.css"/>


</head>
<body>

<div id="mainSection">
<div class="clsServerSDKContent">
<h1><a id="wdf.request_handlers"></a>Request Handlers</h1>
</div>
<h2><a id="ddk_i_o_queue_event_callbacks_df"></a><a id="DDK_I_O_QUEUE_EVENT_CALLBACKS_DF"></a></h2>
<p>If your driver has specified either the sequential or the parallel <a href="dispatching_methods_for_i_o_requests.htm">dispatching method</a> for an I/O queue, the framework calls a driver-supplied callback function each time it is ready to deliver one of the queue's requests to the driver.</p>
<p>For each I/O queue, the driver can provide one or more of the following callback functions, which are called <i>request handlers</i>:</p>
<p></p>
<dl>
<dt><a id="EvtIoRead"></a><a id="evtioread"></a><a id="EVTIOREAD"></a><a href="wdf.evtioread"><i>EvtIoRead</i></a></dt>
<dd>
<p>The framework calls an I/O queue's <a href="wdf.evtioread"><i>EvtIoRead</i></a> callback function when a read request is available in the queue.</p>
</dd>
<dt><a id="EvtIoWrite"></a><a id="evtiowrite"></a><a id="EVTIOWRITE"></a><a href="wdf.evtiowrite"><i>EvtIoWrite</i></a></dt>
<dd>
<p>The framework calls an I/O queue's <a href="wdf.evtiowrite"><i>EvtIoWrite</i></a> callback function when a write request is available in the queue.</p>
</dd>
<dt><a id="EvtIoDeviceControl"></a><a id="evtiodevicecontrol"></a><a id="EVTIODEVICECONTROL"></a><a href="wdf.evtiodevicecontrol"><i>EvtIoDeviceControl</i></a></dt>
<dd>
<p>The framework calls an I/O queue's <a href="wdf.evtiodevicecontrol"><i>EvtIoDeviceControl</i></a> callback function when a device I/O control request is available in the queue.</p>
</dd>
<dt><a id="EvtIoInternalDeviceControl"></a><a id="evtiointernaldevicecontrol"></a><a id="EVTIOINTERNALDEVICECONTROL"></a><a href="wdf.evtiointernaldevicecontrol"><i>EvtIoInternalDeviceControl</i></a></dt>
<dd>
<p>The framework calls an I/O queue's <a href="wdf.evtiointernaldevicecontrol"><i>EvtIoInternalDeviceControl</i></a> callback function when an internal device I/O control request is available in the queue.</p>
</dd>
<dt><a id="EvtIoDefault"></a><a id="evtiodefault"></a><a id="EVTIODEFAULT"></a><a href="wdf.evtiodefault"><i>EvtIoDefault</i></a></dt>
<dd>
<p>The framework calls an I/O queue's <a href="wdf.evtiodefault"><i>EvtIoDefault</i></a> callback function when any request is available, if the driver has not supplied the associated request-type-specific callback function. </p>
</dd>
</dl>
<p>The driver registers callback functions when it calls <a href="wdf.wdfioqueuecreate"><b>WdfIoQueueCreate</b></a> to create an I/O queue for a device. </p>
<p>Each of these callback functions receives two input arguments: a handle to the I/O request that the framework is delivering to the driver and a handle to the I/O queue that held the request. A callback function can determine the target device by calling <a href="wdf.wdfioqueuegetdevice"><b>WdfIoQueueGetDevice</b></a>.</p>
<p>The framework calls your driver's request handlers in an arbitrary thread context. A driver should not wait for an extended period of time while executing in an arbitrary thread context. In some cases, your driver might use kernel dispatcher objects as synchronization mechanisms. For information about when your driver can wait for dispatcher objects, and what to do when it can't,  see <a href="kernel.introduction_to_kernel_dispatcher_objects">Introduction to Kernel Dispatcher Objects</a>.</p>
<p> </p>
<p> </p>
<p><a href="mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback [wdf\wdf]:%20Request Handlers%20 RELEASE:%20(3/15/2016)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AWe use your feedback to improve the documentation. We don't use your email address for any other purpose, and we'll remove your email address from our system after the issue that you're reporting is fixed. While we're working to fix this issue, we might send you an email message to ask for more info. Later, we might also send you an email message to let you know that we've addressed your feedback.%0A%0AFor more info about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx." title="Send comments about this topic to Microsoft">Send comments about this topic to Microsoft</a></p>
</div>
<p style="text-align:left;font-family:Arial,sanserif;font-size:100%;color:black">
&#x00a9;&#x00a0;2016 Microsoft. All rights reserved.</p>

</body>
</html>
