<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:mssdk="winsdk" xmlns:script="urn:script" xmlns:build="urn:build" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="Description" content="Preprocessing and Postprocessing IRPs"/>
<meta name="MSHAttr" content="PreferredSiteName:MSDN"/>
<meta name="MSHAttr" content="PreferredLib:/library/windows/hardware"/>
<title>Preprocessing and Postprocessing IRPs</title>

<meta name="MS-HAID" content="Ch8_DFTechniques_9f549ea5-7081-459a-9688-16ede6dd81d7.xml"/>
<meta name="MS-HAID" content="kmdf.preprocessing_and_postprocessing_irps"/>
<meta name="MS-HAID" content="wdf.preprocessing_and_postprocessing_irps"/>


<link rel="STYLESHEET" type="text/css" HREF="../common/backsdk4.css"/>


</head>
<body>

<div id="mainSection">
<div class="clsServerSDKContent">
<h1><a id="wdf.preprocessing_and_postprocessing_irps"></a>Preprocessing and Postprocessing IRPs</h1>
</div>
<p class="CCE_Message">[Applies to KMDF only]</p>
<p>If your driver must intercept an I/O request packet (IRP) before or after the framework handles the IRP, the driver can call <a href="wdf.wdfdeviceinitassignwdmirppreprocesscallback"><b>WdfDeviceInitAssignWdmIrpPreprocessCallback</b></a> to register an <a href="wdf.evtdevicewdmirppreprocess"><i>EvtDeviceWdmIrpPreprocess</i></a> event callback function for a major I/O function code and, optionally, for specific minor I/O function codes that are associated with the major code. Subsequently, the framework calls the driver's <i>EvtDeviceWdmIrpPreprocess</i> callback function whenever the driver receives an IRP that contains a specified major and minor function code. </p>
<p>The <a href="wdf.evtdevicewdmirppreprocess"><i>EvtDeviceWdmIrpPreprocess</i></a> callback function can do whatever is necessary to preprocess the IRP, and then it must call <a href="wdf.wdfdevicewdmdispatchpreprocessedirp"><b>WdfDeviceWdmDispatchPreprocessedIrp</b></a> to return the IRP to the framework unless the driver is <a href="handling_an_irp_that_the_framework_does_not_support.htm">handling an IRP that the framework does not support</a>.</p>
<p>After the driver calls <a href="wdf.wdfdevicewdmdispatchpreprocessedirp"><b>WdfDeviceWdmDispatchPreprocessedIrp</b></a>, the framework processes the IRP in the same way that it would have if the driver had not provided an <a href="wdf.evtdevicewdmirppreprocess"><i>EvtDeviceWdmIrpPreprocess</i></a> callback function. If the IRP's I/O function code is one that the framework passes to drivers, the driver will receive the IRP again as a request object. </p>
<p>If the driver needs to postprocess the IRP after a lower-level driver completes the IRP, the driver's <a href="wdf.evtdevicewdmirppreprocess"><i>EvtDeviceWdmIrpPreprocess</i></a> callback function can call <a href="kernel.iosetcompletionroutine"><b>IoSetCompletionRoutine</b></a> to set an <a href="kernel.iocompletion"><i>IoCompletion</i></a> routine before it calls <a href="wdf.wdfdevicewdmdispatchpreprocessedirp"><b>WdfDeviceWdmDispatchPreprocessedIrp</b></a>.</p>
<p>After your driver calls <a href="wdf.wdfdeviceinitassignwdmirppreprocesscallback"><b>WdfDeviceInitAssignWdmIrpPreprocessCallback</b></a>, the framework causes the I/O manager to add an additional <a href="kernel.i_o_stack_locations">I/O stack location</a> to all IRPs  so that the <a href="wdf.evtdevicewdmirppreprocess"><i>EvtDeviceWdmIrpPreprocess</i></a> callback function can set an <a href="kernel.iocompletion"><i>IoCompletion</i></a> routine. The callback function must update the IRP's I/O stack location pointer before it calls <a href="wdf.wdfdevicewdmdispatchpreprocessedirp"><b>WdfDeviceWdmDispatchPreprocessedIrp</b></a>. </p>
<h3><a id="calling_wdfdevicewdmdispatchpreprocessedirp"></a><a id="CALLING_WDFDEVICEWDMDISPATCHPREPROCESSEDIRP"></a>Calling WdfDeviceWdmDispatchPreprocessedIrp</h3>
<p>Because the I/O manager adds an additional I/O stack location to the IRP, the <a href="wdf.evtdevicewdmirppreprocess"><i>EvtDeviceWdmIrpPreprocess</i></a> callback function must call <a href="kernel.ioskipcurrentirpstacklocation"><b>IoSkipCurrentIrpStackLocation</b></a> or <a href="kernel.iocopycurrentirpstacklocationtonext"><b>IoCopyCurrentIrpStackLocationToNext</b></a> (to set up the next I/O stack location in the IRP) before calling <a href="wdf.wdfdevicewdmdispatchpreprocessedirp"><b>WdfDeviceWdmDispatchPreprocessedIrp</b></a>.</p>
<p>If your driver is preprocessing an IRP, but not postprocessing the IRP, the driver does not need to set an <a href="kernel.iocompletion"><i>IoCompletion</i></a> routine for the IRP and can call <a href="kernel.ioskipcurrentirpstacklocation"><b>IoSkipCurrentIrpStackLocation</b></a>, as the following code example shows. </p>
<div class="code"><span codelanguage=""><table>
<tr>
<th></th>
</tr>
<tr>
<td>
<pre>NTSTATUS
  EvtDeviceMyIrpPreprocess(
    IN WDFDEVICE Device,
    IN OUT PIRP Irp
    )
{
//
// Perform IRP preprocessing operations here.
//
...
//
// Deliver the IRP back to the framework. 
//
IoSkipCurrentIrpStackLocation(Irp);
return WdfDeviceWdmDispatchPreprocessedIrp(Device, Irp);
}</pre>
</td>
</tr>
</table></span></div>
<p>If your driver is postprocessing the IRP, the driver must call <a href="kernel.iocopycurrentirpstacklocationtonext"><b>IoCopyCurrentIrpStackLocationToNext</b></a>, and then it must call <a href="kernel.iosetcompletionroutine"><b>IoSetCompletionRoutine</b></a> to set an <a href="kernel.iocompletion"><i>IoCompletion</i></a> routine for the IRP, as the following code example shows. </p>
<div class="code"><span codelanguage=""><table>
<tr>
<th></th>
</tr>
<tr>
<td>
<pre>NTSTATUS
  EvtDeviceMyIrpPreprocess(
    IN WDFDEVICE Device,
    IN OUT PIRP Irp
    )
{
//
// Perform IRP preprocessing operations here, if needed.
//
...
//
// Set a completion routine and deliver the IRP back to
// the framework. 
//
IoCopyCurrentIrpStackLocationToNext(Irp);
IoSetCompletionRoutine(
                       Irp,
                       MyIrpCompletionRoutine,
                       NULL,
                       TRUE,
                       TRUE,
                       TRUE
                      );
return WdfDeviceWdmDispatchPreprocessedIrp(Device, Irp);
}</pre>
</td>
</tr>
</table></span></div>
<p>Your driver must not call <a href="kernel.iocopycurrentirpstacklocationtonext"><b>IoCopyCurrentIrpStackLocationToNext</b></a> (and therefore must not set an <a href="kernel.iocompletion"><i>IoCompletion</i></a> routine) if the device object handle that the driver's <a href="wdf.evtdevicewdmirppreprocess"><i>EvtDeviceWdmIrpPreprocess</i></a> callback function receives represents a physical device object (PDO), and if the IRP's major function code is IRP_MJ_PNP or IRP_MJ_POWER. Otherwise, <a href="devtest.driver_verifier">Driver Verifier</a> will report an error.</p>
<p>For more information about when to call <a href="kernel.iocopycurrentirpstacklocationtonext"><b>IoCopyCurrentIrpStackLocationToNext</b></a>, <a href="kernel.ioskipcurrentirpstacklocation"><b>IoSkipCurrentIrpStackLocation</b></a>, and <a href="kernel.iosetcompletionroutine"><b>IoSetCompletionRoutine</b></a>, see <a href="kernel.passing_irps_down_the_driver_stack">Passing IRPs down the Driver Stack</a>.</p>
<p> </p>
<p> </p>
<p><a href="mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback [wdf\wdf]:%20Preprocessing and Postprocessing IRPs%20 RELEASE:%20(3/15/2016)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AWe use your feedback to improve the documentation. We don't use your email address for any other purpose, and we'll remove your email address from our system after the issue that you're reporting is fixed. While we're working to fix this issue, we might send you an email message to ask for more info. Later, we might also send you an email message to let you know that we've addressed your feedback.%0A%0AFor more info about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx." title="Send comments about this topic to Microsoft">Send comments about this topic to Microsoft</a></p>
</div>
<p style="text-align:left;font-family:Arial,sanserif;font-size:100%;color:black">
&#x00a9;&#x00a0;2016 Microsoft. All rights reserved.</p>

</body>
</html>
