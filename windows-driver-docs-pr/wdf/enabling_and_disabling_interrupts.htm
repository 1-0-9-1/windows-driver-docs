<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:mssdk="winsdk" xmlns:script="urn:script" xmlns:build="urn:build" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="Description" content="Enabling and Disabling Interrupts"/>
<meta name="MSHAttr" content="PreferredSiteName:MSDN"/>
<meta name="MSHAttr" content="PreferredLib:/library/windows/hardware"/>
<title>Enabling and Disabling Interrupts</title>

<meta name="MS-HAID" content="Ch8_DFTechniques_ea918adf-6541-4c28-a48c-81e78b7cc7c3.xml"/>
<meta name="MS-HAID" content="kmdf.enabling_and_disabling_interrupts"/>
<meta name="MS-HAID" content="wdf.enabling_and_disabling_interrupts"/>


<link rel="STYLESHEET" type="text/css" HREF="../common/backsdk4.css"/>


</head>
<body>

<div id="mainSection">
<div class="clsServerSDKContent">
<h1><a id="wdf.enabling_and_disabling_interrupts"></a>Enabling and Disabling Interrupts</h1>
</div>
<p>If your driver handles device interrupts, it must provide DIRQL and must do whatever is necessary to enable and disable a device's interrupt mechanism. For <a href="supporting_passive_level_interrupts.htm">passive-level interrupts</a>, these callback functions run at IRQL = PASSIVE_LEVEL while holding the passive-level interrupt lock.</p>
<p>If your driver must perform additional operations that are related to enabling or disabling interrupts, and if these additional operations cannot be performed at IRQL = DIRQL, the driver can also provide <a href="wdf.evtdeviced0entrypostinterruptsenabled"><i>EvtDeviceD0EntryPostInterruptsEnabled</i></a> and <a href="wdf.evtdeviced0exitpreinterruptsdisabled"><i>EvtDeviceD0ExitPreInterruptsDisabled</i></a> callback functions. These two callback functions run at IRQL = PASSIVE_LEVEL with no interrupt lock held, and can call framework object methods that are unavailable at IRQL = DIRQL.</p>
<p>The framework calls the driver's <a href="wdf.evtinterruptenable"><i>EvtInterruptEnable</i></a> and <a href="wdf.evtdeviced0entrypostinterruptsenabled"><i>EvtDeviceD0EntryPostInterruptsEnabled</i></a> callback functions each time the device enters its working (D0) state, after the framework has called the driver's <a href="wdf.evtdeviced0entry"><i>EvtDeviceD0Entry</i></a> callback function.</p>
<p> The framework calls the driver's <a href="wdf.evtdeviced0exitpreinterruptsdisabled"><i>EvtDeviceD0ExitPreInterruptsDisabled</i></a> and <a href="wdf.evtinterruptdisable"><i>EvtInterruptDisable</i></a> callback functions each time the device leaves its working state, before the framework calls the driver's <a href="wdf.evtdeviced0exit"><i>EvtDeviceD0Exit</i></a> callback function. For more information about when the framework calls a driver's callback functions, see <a href="pnp_and_power_management_scenarios.htm">PnP and Power Management Scenarios</a>.</p>
<p>You must not assume that a device will use the same interrupt resources each time the framework calls your driver's <a href="wdf.evtinterruptenable"><i>EvtInterruptEnable</i></a> callback function. Sometimes the PnP manager <a href="the_pnp_manager_redistributes_system_resources.htm">redistributes system resources</a>, and it might assign new interrupt resources to your device. </p>
<p>The driver can call <a href="wdf.wdfinterruptgetinfo"><b>WdfInterruptGetInfo</b></a> to determine a device's interrupt resources. The driver can call <a href="wdf.wdfinterruptgetdevice"><b>WdfInterruptGetDevice</b></a> to determine the device that an interrupt object belongs to. (A few drivers might call <a href="wdf.wdfinterruptwdmgetinterrupt"><b>WdfInterruptWdmGetInterrupt</b></a>.)</p>
<p>To enable and disable interrupts directly, the driver can call the interrupt object's <a href="wdf.wdfinterruptenable"><b>WdfInterruptEnable</b></a> and <a href="wdf.wdfinterruptdisable"><b>WdfInterruptDisable</b></a> methods, which call the driver's <a href="wdf.evtinterruptenable"><i>EvtInterruptEnable</i></a> and <a href="wdf.evtinterruptdisable"><i>EvtInterruptDisable</i></a> event callback functions. However, most drivers should just allow the framework to call the <i>EvtInterruptEnable</i> and <i>EvtInterruptDisable</i> callback functions at the proper times.</p>
<p> </p>
<p> </p>
<p><a href="mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback [wdf\wdf]:%20Enabling and Disabling Interrupts%20 RELEASE:%20(3/15/2016)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AWe use your feedback to improve the documentation. We don't use your email address for any other purpose, and we'll remove your email address from our system after the issue that you're reporting is fixed. While we're working to fix this issue, we might send you an email message to ask for more info. Later, we might also send you an email message to let you know that we've addressed your feedback.%0A%0AFor more info about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx." title="Send comments about this topic to Microsoft">Send comments about this topic to Microsoft</a></p>
</div>
<p style="text-align:left;font-family:Arial,sanserif;font-size:100%;color:black">
&#x00a9;&#x00a0;2016 Microsoft. All rights reserved.</p>

</body>
</html>
