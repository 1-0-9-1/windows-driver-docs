<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:mssdk="winsdk" xmlns:script="urn:script" xmlns:build="urn:build" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="Description" content="Supporting Kernel-Mode Clients in UMDF 1.x Drivers"/>
<meta name="MSHAttr" content="PreferredSiteName:MSDN"/>
<meta name="MSHAttr" content="PreferredLib:/library/windows/hardware"/>
<title>Supporting Kernel-Mode Clients in UMDF 1.x Drivers</title>

<meta name="MS-HAID" content="umdfobjectdg_54c83a7e-b2e5-4442-bbc4-11d2765a7863.xml"/>
<meta name="MS-HAID" content="umdf.supporting_kernel_mode_clients"/>
<meta name="MS-HAID" content="wdf.supporting_kernel_mode_clients"/>
<meta name="MS-HAID" content="wdf.supporting_kernel_mode_clients_in_umdf_1_x_drivers"/>


<link rel="STYLESHEET" type="text/css" HREF="../common/backsdk4.css"/>


</head>
<body>

<div id="mainSection">
<div class="clsServerSDKContent">
<h1><a id="wdf.supporting_kernel_mode_clients_in_umdf_1_x_drivers"></a>Supporting Kernel-Mode Clients in UMDF 1.x Drivers</h1>
</div>
<p>UMDF versions 1.9 and later allow UMDF drivers to support <i>kernel-mode clients</i>. A kernel-mode client can be either of the following:</p>
<ul>
<li>
<p>A kernel-mode driver that exists above a UMDF driver in a device's driver stack.</p>
</li>
<li>
<p>A kernel-mode driver for one device stack, which supports one device, opens a handle to another device, and the latter device's driver stack contains a UMDF driver.</p>
</li>
</ul>
<p>In other words, a UMDF driver that supports kernel-mode clients can receive I/O requests from a kernel-mode driver. The kernel-mode driver can forward I/O requests that it has received from a user-mode application, or can create new I/O requests and send them to the user-mode driver.</p>
<p>To determine if your UMDF driver must support kernel-mode clients, you must understand the driver stack to which your driver will be added, and where in that stack your driver will reside. You must also determine whether a driver from another stack might send I/O requests to your driver's device.</p>
<p>Your driver must support kernel-mode clients if:</p>
<ul>
<li>
<p>A kernel-mode driver can be located directly above your UMDF driver in a driver stack. For example, a kernel-mode filter driver might reside directly above a UMDF-based function driver.</p>
</li>
<li>
<p>A kernel-mode driver from another stack can send I/O requests to your driver's device. For example, your driver might create a symbolic link that a kernel-mode driver in another stack can use to open a handle to your driver's device. The kernel-mode driver can then send I/O requests to the device.</p>
</li>
</ul>
<h3><a id="how_to_support_kernel_mode_clients_in_a_umdf_based_driver"></a><a id="HOW_TO_SUPPORT_KERNEL_MODE_CLIENTS_IN_A_UMDF_BASED_DRIVER"></a>How to support kernel-mode clients in a UMDF driver</h3>
<p>A UMDF driver can receive I/O requests from a kernel-mode driver only if the UMDF driver has enabled support for kernel-mode clients. Furthermore, if a device installation attempts to load kernel-mode drivers above a UMDF driver in the device's driver stack, the framework allows the drivers to load only if the UMDF driver has enabled support for kernel-mode clients.</p>
<p>To enable a UMDF driver's support for kernel-mode clients, the INF file of the UMDF driver must include a <a href="specifying_wdf_directives_in_inf_files.htm">UmdfKernelModeClientPolicy</a> directive in its INF <i>DDInstall</i>.<b>WDF</b> section. If the INF file of the UMDF driver does not include this directive, UMDF does not allow a kernel-mode driver that is installed above the UMDF driver to run.</p>
<p>The framework provides two methods that are useful to drivers that support kernel-mode clients. A driver can call the <a href="wdf.iwdfiorequest2_getrequestormode"><b>IWDFIoRequest2::GetRequestorMode</b></a> method to determine whether an I/O request came from kernel mode or user mode. If the I/O request came from user mode, the driver can call <a href="wdf.iwdfiorequest2_isfromusermodedriver"><b>IWDFIoRequest2::IsFromUserModeDriver</b></a> to determine whether the request came from an application or another user-mode driver.</p>
<h3><a id="restrictions_on_kernel_mode_drivers"></a><a id="RESTRICTIONS_ON_KERNEL_MODE_DRIVERS"></a>Restrictions on kernel-mode drivers</h3>
<p>A UMDF driver can process I/O requests from a kernel-mode driver only if the kernel-mode driver meets the following requirements:</p>
<ul>
<li>
<p>The kernel-mode driver must be running at IRQL = PASSIVE_LEVEL when it sends the I/O request.</p>
</li>
<li>
<p>Unless the driver has set the <b>UmdfFileObjectPolicy</b> INF directive to <b>AllowNullAndUnknownFileObjects</b>, each I/O request that a kernel-mode driver sends to a user-mode driver must have an associated file object. The framework must have previously been notified that the I/O manager created the file object. (Such notification causes the framework to call the user-mode driver's <a href="umdf.iqueuecallbackcreate_oncreatefile"><b>IQueueCallbackCreate::OnCreateFile</b></a>  callback function, but that callback function is optional.) </p>
</li>
<li>
<p>The I/O request cannot contain an <a href="kernel.irp_mj_internal_device_control"><b>IRP_MJ_INTERNAL_DEVICE_CONTROL</b></a> function code. </p>
</li>
<li>
<p>The I/O request's buffers must not contain pointers to additional information, because the user-mode driver cannot dereference the pointers.</p>
</li>
<li>
<p>If the I/O request contains an <a href="kernel.using_i_o_control_codes">I/O control code</a> that specifies the "neither" buffer access method, the kernel-mode driver must send the I/O request in the process context of the application that created the I/O request. For more information about how to support the "neither" method in a UMDF-base driver, see <a href="wdf.accessing_data_buffers_in_umdf_drivers#using_neither_buffered_i_o_nor_direct_i_o_in_umdf_drivers#using_neither_buffered_i_o_nor_direct_i_o_in_umdf_drivers">Using Neither Buffered I/O nor Direct I/O in UMDF Drivers</a>.</p>
</li>
<li>
<p>The UMDF driver might modify an I/O request's output data, in user mode. Therefore, the kernel-mode driver must validate any output data that it receives from the user-mode driver.</p>
</li>
<li>
<p>The kernel-mode client should typically validate the <i>Information</i> value that a UMDF driver passes to <a href="wdf.iwdfiorequest_completewithinformation"><b>IWDFIoRequest::CompleteWithInformation</b></a>.  If the client is a KMDF driver, it can call <a href="wdf.wdfrequestgetcompletionparams"><b>WdfRequestGetCompletionParams</b></a> to obtain this information in an IO_STATUS_BLOCK structure.</p>
<p>Typically, the framework does not validate the information value that a UMDF driver passes to <a href="wdf.iwdfiorequest_completewithinformation"><b>IWDFIoRequest::CompleteWithInformation</b></a>. (This parameter usually specifies the number of transferred bytes.) The framework validates the information value only for output buffers, and only for the <a href="wdf.accessing_data_buffers_in_umdf_drivers#using_buffered_i_o_in_umdf_drivers#using_buffered_i_o_in_umdf_drivers">buffered I/O</a> data access method. (For example, the framework verifies that the number of transferred bytes does not exceed the output buffer size of a read operation, if the access method is buffered I/O.) </p>
</li>
</ul>
<h3><a id="handling_return_status_values"></a><a id="HANDLING_RETURN_STATUS_VALUES"></a>Handling return status values in a UMDF 1.x driver</h3>
<p>Passing return status values from user-mode to kernel-mode requires special attention, as follows:</p>
<ul>
<li>
<p> UMDF version 1 drivers typically receive HRESULT-typed return values, while KMDF and WDM-based kernel-mode drivers typically receive NTSTATUS-typed values. If a UMDF 1.<i>x</i> driver completes an I/O request, and if the driver has a kernel-mode client, the driver's call to <a href="wdf.iwdfiorequest_complete"><b>IWDFIoRequest::Complete</b></a> or <a href="wdf.iwdfiorequest_completewithinformation"><b>IWDFIoRequest::CompleteWithInformation</b></a> should specify an HRESULT value that the driver generates from an NTSTATUS value. In general, UMDF 1.<i>x</i> drivers should use the HRESULT_FROM_NT macro (defined in <i>Winerror.h</i>) to  return status to a kernel-mode client. The following example shows how to use this macro when completing a request.</p>
<div class="code"><span codelanguage=""><table>
<tr>
<th></th>
</tr>
<tr>
<td>
<pre>hr = HRESULT_FROM_NT(STATUS_BUFFER_OVERFLOW)
request-&gt;Complete(HRESULT_FROM_NT(STATUS_BUFFER_OVERFLOW);
return hr;</pre>
</td>
</tr>
</table></span></div>
<p>To return a specific HRESULT value to a kernel-mode client, the following callbacks must use the HRESULT_FROM_NT macro:<ul>
<li><a href="wdf.ipnpcallback_onqueryremove"><b>IPnpCallback::OnQueryRemove</b></a></li>
<li><a href="wdf.ipnpcallback_onquerystop"><b>IPnpCallback::OnQueryStop</b></a></li>
<li><a href="wdf.ipnpcallbackhardware_onpreparehardware"><b>IPnpCallbackHardware::OnPrepareHardware</b></a></li>
<li><a href="wdf.ipnpcallbackhardware_onreleasehardware"><b>IPnpCallbackHardware::OnReleaseHardware</b></a></li>
</ul>
</p>
<p>To use the NTSTATUS values that are defined in <i>ntstatus.h</i>, a UMDF 1.<i>x</i> driver must include these two lines before including any additional headers.</p>
<div class="code"><span codelanguage=""><table>
<tr>
<th></th>
</tr>
<tr>
<td>
<pre>#define UMDF_USING_NTSTATUS
#include &lt;ntstatus.h&gt;
</pre>
</td>
</tr>
</table></span></div>
<p>Do not use the HRESULT_FROM_NT macro to convert STATUS_SUCCESS from an NTSTATUS value to an HRESULT value. Just return S_OK, as shown in the following example. </p>
<div class="code"><span codelanguage=""><table>
<tr>
<th></th>
</tr>
<tr>
<td>
<pre>request-&gt;Complete(S_OK);</pre>
</td>
</tr>
</table></span></div>
</li>
<li>
<p>The framework completes some I/O requests on behalf of UMDF drivers. Sometimes the framework does not convert HRESULT-typed return values into equivalent NTSTATUS values, so the framework might pass an HRESULT-typed completion status to a kernel-mode client.</p>
<p>Because of this situation, kernel-mode clients should not use the NT_ERROR macro when testing an I/O request's completion status, because the NT_ERROR macro does not return <b>TRUE</b> for HRESULT error values. Kernel-mode drivers should use the NT_SUCCESS macro when testing an I/O request's completion status. </p>
</li>
</ul>
<h3><a id="kernel_mode_client_support_in_earlier_umdf_versions"></a><a id="KERNEL_MODE_CLIENT_SUPPORT_IN_EARLIER_UMDF_VERSIONS"></a>
      
      Kernel-mode client support in earlier UMDF versions
     </h3>
<p>For UMDF versions earlier than version 1.9, a driver's INF file can include an <a href="devinst.inf_addreg_directive"><b>INF AddReg directive</b></a> to create a REG_DWORD-sized <b>UpperDriverOk</b> registry value under the <b>WUDF</b> subkey of the device's <a href="wdf.using_the_registry_in_umdf_drivers">hardware key</a>. </p>
<p>If the <b>UpperDriverOk</b> registry value is set to a nonzero number, the framework allows kernel-mode drivers to load above the user-mode driver. The kernel-mode drivers can forward I/O requests from user-mode applications to the UMDF driver, but kernel-mode drivers cannot send I/O requests that are created in kernel mode to the UMDF driver. </p>
<p>For UMDF versions 1.9 and later, the <b>UpperDriverOk</b> registry value is obsolete and supported only for existing drivers. New drivers should use the <a href="specifying_wdf_directives_in_inf_files.htm">UmdfKernelModeClientPolicy</a> directive.</p>
<p> </p>
<p> </p>
<p><a href="mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback [wdf\wdf]:%20Supporting Kernel-Mode Clients in UMDF 1.x Drivers%20 RELEASE:%20(3/15/2016)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AWe use your feedback to improve the documentation. We don't use your email address for any other purpose, and we'll remove your email address from our system after the issue that you're reporting is fixed. While we're working to fix this issue, we might send you an email message to ask for more info. Later, we might also send you an email message to let you know that we've addressed your feedback.%0A%0AFor more info about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx." title="Send comments about this topic to Microsoft">Send comments about this topic to Microsoft</a></p>
</div>
<p style="text-align:left;font-family:Arial,sanserif;font-size:100%;color:black">
&#x00a9;&#x00a0;2016 Microsoft. All rights reserved.</p>

</body>
</html>
