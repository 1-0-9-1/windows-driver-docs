<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:mssdk="winsdk" xmlns:script="urn:script" xmlns:build="urn:build" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="Description" content="This topic lists versions of User-Mode Driver Framework (UMDF), the corresponding versions of the Windows operating system, and the changes made in each release."/>
<meta name="MSHAttr" content="PreferredSiteName:MSDN"/>
<meta name="MSHAttr" content="PreferredLib:/library/windows/hardware"/>
<title>UMDF Version History</title>

<meta name="MS-HAID" content="umdfobjectdg_a4e0e7ec-0573-4ebe-b1d6-6ef8bb8ebe03.xml"/>
<meta name="MS-HAID" content="umdf.umdf_version_information"/>
<meta name="MS-HAID" content="umdf.umdf_version_history"/>
<meta name="MS-HAID" content="wdf.umdf_version_history"/>


<link rel="STYLESHEET" type="text/css" HREF="../common/backsdk4.css"/>


</head>
<body>

<div id="mainSection">
<div class="clsServerSDKContent">
<h1><a id="wdf.umdf_version_history"></a>UMDF Version History</h1>
</div>
<p>This topic lists versions of User-Mode Driver Framework (UMDF), the corresponding versions of the Windows operating system, and the changes made in each release.</p>
<h2><a id="UMDF_Versions_and_Operating_Systems"></a><a id="umdf_versions_and_operating_systems"></a><a id="UMDF_VERSIONS_AND_OPERATING_SYSTEMS"></a>UMDF Versions and Operating Systems</h2>
<p>The following table shows the release history of the UMDF library:</p>
<table>
<tr>
<th>UMDF  version</th>
<th>Release method</th>
<th>Included in this version of Windows</th>
<th>Drivers using it can run on <sup>&#x2020;</sup></th>
</tr>
<tr>
<td>
<p>2.17</p>
</td>
<td>
<p>Windows 10, version 1511 WDK</p>
</td>
<td>
<p>Windows 10, version 1511</p>
</td>
<td>
<p>Windows 10 for desktop editions (Home, Pro, Enterprise, and Education),  Windows 10 Mobile, Windows 10 IoT Core (IoT Core), Windows Server 2016 Technical Preview</p>
</td>
</tr>
<tr>
<td>
<p>2.15</p>
</td>
<td>
<p>Windows 10 WDK</p>
</td>
<td>
<p>Windows 10</p>
</td>
<td>
<p>Windows 10 for desktop editions,  Windows 10 Mobile, IoT Core, Windows Server 2016 Technical Preview</p>
</td>
</tr>
<tr>
<td>
<p>2.0</p>
</td>
<td>
<p>Windows Driver Kit (WDK) 8.1</p>
</td>
<td>
<p>Windows 8.1</p>
</td>
<td>
<p>Windows 8.1
              and later</p>
</td>
</tr>
<tr>
<td>
<p>1.11</p>
</td>
<td>
<p>Windows Driver Kit (WDK) 8</p>
</td>
<td>
<p>Windows 8</p>
</td>
<td>
<p>Windows Vista and later</p>
</td>
</tr>
<tr>
<td>
<p>1.9</p>
</td>
<td>
<p>Windows 7  WDK</p>
</td>
<td>
<p>Windows 7</p>
</td>
<td>
<p>Windows XP and later</p>
</td>
</tr>
<tr>
<td>
<p>1.7</p>
</td>
<td>
<p>Windows Server 2008 WDK</p>
</td>
<td>
<p>Windows Vista with Service Pack 1 (SP1), Windows Server 2008</p>
</td>
<td>
<p>Windows XP and later</p>
</td>
</tr>
<tr>
<td>
<p>1.5</p>
</td>
<td>
<p>Windows Vista  WDK</p>
</td>
<td>
<p>Windows Vista</p>
</td>
<td>
<p>Windows XP and later</p>
</td>
</tr>
</table>
<p> </p>
<p>You can use the Windows Driver Kit (WDK) 10 with Microsoft Visual Studio 2015 to build drivers that run on Windows 7 and later.</p>
<h2><a id="UMDF_Version_2.17"></a><a id="umdf_version_2.17"></a><a id="UMDF_VERSION_2.17"></a>UMDF Version 2.17</h2>
<p>This version adds UMDF support for the following existing interfaces:</p>
<ul>
<li><a href="wdf.wdfdeviceconfigurewdmirpdispatchcallback"><b>WdfDeviceConfigureWdmIrpDispatchCallback</b></a></li>
<li><a href="wdf.evtdevicewdmirpdispatch"><i>EvtDeviceWdmIrpDispatch</i></a></li>
<li><a href="wdf.wdfdevicewdmdispatchirp"><b>WdfDeviceWdmDispatchIrp</b></a></li>
<li><a href="wdf.wdfdevicewdmdispatchirptoioqueue"><b>WdfDeviceWdmDispatchIrpToIoQueue</b></a></li>
</ul>
<p>For more information, see <a href="dispatching_irps_to_i_o_queues.htm">Dispatching IRPs to I/O Queues</a>.</p>
<h2><a id="UMDF_Version_2.15"></a><a id="umdf_version_2.15"></a><a id="UMDF_VERSION_2.15"></a>UMDF Version 2.15</h2>
<p>For information about the new features for UMDF drivers in Windows 10, see <a href="what_s_new_for_wdf_drivers.htm">What's New for  WDF Drivers</a>.</p>
<p>Here is the list of updated DDIs for version 2.15:</p>
<ul>
<li>
<p>The new <a href="wdf.wdfdeviceopendevicemapkey"><b>WdfDeviceOpenDevicemapKey</b></a> method allows a driver to access subkeys and values under <b>HKEY_LOCAL_MACHINE\HARDWARE\DEVICEMAP</b>. </p>
</li>
<li>
<p>A UMDF driver can call <a href="wdf.wdfiotargetwdmgettargetfilehandle"><b>WdfIoTargetWdmGetTargetFileHandle</b></a> to obtain a file handle to the next-lower kernel-mode driver in its stack. The driver can write data to that handle, bypassing the framework's abstractions for sending I/O to the local I/O target.</p>
</li>
<li>
<p>A UMDF driver can request that the underlying bus driver re-enumerate it.  See <a href="wdf.wdfdevicesetfailed"><b>WdfDeviceSetFailed</b></a>.</p>
</li>
<li>
<p>Setting the <b>UmdfDirectHardwareAccess</b> directive is no longer always necessary for devices that have connection resources. See <a href="specifying_wdf_directives_in_inf_files.htm">Specifying WDF Directives in INF Files</a>.</p>
</li>
</ul>
<h2><a id="UMDF_Version_2.0"></a><a id="umdf_version_2.0"></a><a id="UMDF_VERSION_2.0"></a>UMDF Version 2.0</h2>
<p>In addition to the shared functionality described in <a href="getting_started_with_umdf_version_2.htm">Getting Started with UMDF</a>, UMDF version 2.0 adds:</p>
<ul>
<li>Support for timers that do not wake the system if they expire when the system is in a low-power state. For more information, see <a href="using_timers.htm">Using Timers</a>.</li>
<li>Added <b>CanWakeDevice</b> member to <a href="wdf.wdf_interrupt_config"><b>WDF_INTERRUPT_CONFIG</b></a> structure to support interrupts that can be used to bring a device from a low-power Dx state back to its fully on D0 state. For more information, see <a href="using_an_interrupt_to_wake_a_device.htm">Using an Interrupt to Wake a Device</a>.</li>
<li>
<p>Single-component, single-state (F0) power management for UMDF drivers. For more information, see <a href="wdf.wdfdeviceassigns0idlesettings"><b>WdfDeviceAssignS0IdleSettings</b></a>.</p>
</li>
<li>
<p>Several debugger extension commands in Wdfkd.dll can now be used for UMDF 2.0 drivers as well. The extension library also contains the following new extension commands designed specifically for debugging UMDF 2.0 drivers:</p>
<ul>
<li><a href="debugger._wdfkd_wdfumdevstack"><b>!wdfkd.wdfumdevstack</b></a></li>
<li><a href="debugger._wdfkd_wdfumdevstacks"><b>!wdfkd.wdfumdevstacks</b></a></li>
<li><a href="debugger._wdfkd_wdfumdownirp"><b>!wdfkd.wdfumdownirp</b></a></li>
<li><a href="debugger._wdfkd_wdfumfile"><b>!wdfkd.wdfumfile</b></a></li>
<li><a href="debugger._wdfkd_wdfumirp"><b>!wdfkd.wdfumirp</b></a></li>
<li><a href="debugger._wdfkd_wdfumirps"><b>!wdfkd.wdfumirps</b></a></li>
<li><a href="debugger._wdfkd_wdfdeviceinterrupts"><b>!wdfkd.wdfdeviceinterrupts</b></a></li>
</ul>
<p>For a list of extension commands and framework applicability, see <a href="debugger_extensions_for_kmdf_drivers.htm">Debugger Extensions</a>.</p>
</li>
<li>The <a href="using_the_framework_s_event_logger.htm">framework's event logger</a>, or <i>In-flight Recorder</i> (IFR) has been updated to work for UMDF 2.0 drivers.</li>
<li>Other WDF debugger extensions have been updated to work with UMDF 2.0 drivers. For a full list of extension commands, including information about which ones apply to which framework, see <a href="debugger_extensions_for_kmdf_drivers.htm">Debugger Extensions for WDF Drivers</a>.</li>
<li>Added <b>WdfIoTargetOpenLocalTargetByFile</b>  to <a href="wdf.wdf_io_target_open_type"><b>WDF_IO_TARGET_OPEN_TYPE</b></a> to allow UMDF drivers to send driver-created requests to lower targets that require an associated file object. For more information, see the Remarks of  <b>WDF_IO_TARGET_OPEN_TYPE</b>.</li>
<li>
<p>The following UMDF-only routines:</p>
<ul>
<li><a href="wdf.evtrequestimpersonate"><i>EvtRequestImpersonate</i></a></li>
<li><a href="wdf.wdf_io_target_open_params_init_open_by_file"><b>WDF_IO_TARGET_OPEN_PARAMS_INIT_OPEN_BY_FILE</b></a></li>
<li><a href="wdf.wdfdeviceallocandqueryinterfaceproperty"><b>WdfDeviceAllocAndQueryInterfaceProperty</b></a></li>
<li><a href="wdf.wdfdeviceassigninterfaceproperty"><b>WdfDeviceAssignInterfaceProperty</b></a></li>
<li><a href="wdf.wdfdevicegetdevicestackiotype"><b>WdfDeviceGetDeviceStackIoType</b></a></li>
<li><a href="wdf.wdfdevicegethardwareregistermappedaddress"><b>WdfDeviceGetHardwareRegisterMappedAddress</b></a></li>
<li><a href="wdf.wdfdevicemapiospace"><b>WdfDeviceMapIoSpace</b></a></li>
<li><a href="wdf.wdfdevicepostevent"><b>WdfDevicePostEvent</b></a></li>
<li><a href="wdf.wdfdevicequeryinterfaceproperty"><b>WdfDeviceQueryInterfaceProperty</b></a></li>
<li><a href="wdf.wdfdeviceunmapiospace"><b>WdfDeviceUnmapIoSpace</b></a></li>
<li><a href="wdf.wdffileobjectgetinitiatorprocessid"><b>WdfFileObjectGetInitiatorProcessId</b></a></li>
<li><a href="wdf.wdffileobjectgetrelatedfileobject"><b>WdfFileObjectGetRelatedFileObject</b></a></li>
<li><a href="wdf.wdfrequestgeteffectiveiotype"><b>WdfRequestGetEffectiveIoType</b></a></li>
<li><a href="wdf.wdfrequestgetrequestorprocessid"><b>WdfRequestGetRequestorProcessId</b></a></li>
<li><a href="wdf.wdfrequestgetusermodeinitiatedio"><b>WdfRequestGetUserModeInitiatedIo</b></a></li>
<li><a href="wdf.wdfrequestimpersonate"><b>WdfRequestImpersonate</b></a></li>
<li><a href="wdf.wdfrequestisfromusermodedriver"><b>WdfRequestIsFromUserModeDriver</b></a></li>
<li><a href="wdf.wdfrequestretrieveactivityid"><b>WdfRequestRetrieveActivityId</b></a></li>
<li><a href="wdf.wdfrequestsetactivityid"><b>WdfRequestSetActivityId</b></a></li>
<li><a href="wdf.wdfrequestsetusermodedriverinitiatedio"><b>WdfRequestSetUserModeDriverInitiatedIo</b></a></li>
</ul>
</li>
<li>The following KMDF/UMDF methods described in <a href="accessing_the_unified_device_property_model.htm">Accessing the Unified Device Property Model</a>:<ul>
<li><a href="wdf.wdfdeviceallocandquerypropertyex"><b>WdfDeviceAllocAndQueryPropertyEx</b></a></li>
<li><a href="wdf.wdfdeviceassignproperty"><b>WdfDeviceAssignProperty</b></a></li>
<li><a href="wdf.wdfdeviceinitsetiotypeex"><b>WdfDeviceInitSetIoTypeEx</b></a></li>
<li><a href="wdf.wdfdevicequerypropertyex"><b>WdfDeviceQueryPropertyEx</b></a></li>
<li><a href="wdf.wdffdoinitallocandquerypropertyex"><b>WdfFdoInitAllocAndQueryPropertyEx</b></a></li>
<li><a href="wdf.wdffdoinitquerypropertyex"><b>WdfFdoInitQueryPropertyEx</b></a></li>
</ul>
<p>For more information, see <a href="accessing_the_unified_device_property_model.htm">Accessing the Unified Device Property Model</a>.</p>
</li>
<li>Support for the following USB configuration types in <a href="wdf.wdfusbtargetdeviceselectconfigtype"><b>WdfUsbTargetDeviceSelectConfigType</b></a>:<ul>
<li><b>WdfUsbTargetDeviceSelectConfigTypeSingleInterface</b></li>
<li><b>WdfUsbTargetDeviceSelectConfigTypeMultiInterface</b></li>
<li><b>WdfUsbTargetDeviceSelectConfigTypeInterfacesPairs</b></li>
</ul>
</li>
<li>Support for querying the following capability types in <a href="wdf.wdfusbtargetdevicequeryusbcapability"><b>WdfUsbTargetDeviceQueryUsbCapability</b></a>:<ul>
<li><b>GUID_USB_CAPABILITY_DEVICE_CONNECTION_HIGH_SPEED_COMPATIBLE</b></li>
<li><b>GUID_USB_CAPABILITY_DEVICE_CONNECTION_SUPER_SPEED_COMPATIBLE</b></li>
</ul>
</li>
<li>Added <a href="wdf.wdf_register_port_access_functions">WDF Register/Port Access Functions</a></li>
</ul>
<h2><a id="UMDF_Version_1.11"></a><a id="umdf_version_1.11"></a><a id="UMDF_VERSION_1.11"></a>UMDF Version 1.11</h2>
<p>Version 1.11 adds the following driver-supplied callback interfaces and event callback functions:</p>
<dl>
<dd>
<p><a href="wdf.ipnpcallbackhardware2"><b>IPnpCallbackHardware2</b></a></p>
</dd>
<dd>
<p><a href="wdf.ipnpcallbackhardwareinterrupt"><b>IPnpCallbackHardwareInterrupt</b></a></p>
</dd>
</dl>
<p>Version 1.11 adds the following framework-supplied interfaces:</p>
<dl>
<dd>
<p><a href="wdf.iwdfcmresourcelist"><b>IWDFCmResourceList</b></a></p>
</dd>
<dd>
<p><a href="wdf.iwdfdevice3"><b>IWDFDevice3</b></a></p>
</dd>
<dd>
<p><a href="wdf.iwdffile3"><b>IWDFFile3</b></a></p>
</dd>
<dd>
<p><a href="wdf.iwdfinterrupt"><b>IWDFInterrupt</b></a></p>
</dd>
<dd>
<p><a href="wdf.iwdfiorequest3"><b>IWDFIoRequest3</b></a></p>
</dd>
<dd>
<p><a href="wdf.iwdfunifiedpropertystore"><b>IWDFUnifiedPropertyStore</b></a></p>
</dd>
<dd>
<p><a href="wdf.iwdfunifiedpropertystorefactory"><b>IWDFUnifiedPropertyStoreFactory</b></a></p>
</dd>
<dd>
<p><a href="wdf.iwdfworkitem"><b>IWDFWorkItem</b></a></p>
</dd>
</dl>
<p>Version 1.11 adds the following capabilities to UMDF-based drivers:</p>
<ul>
<li>
<p><a href="accessing_hardware_and_handling_interrupts.htm">Accessing Hardware and Handling Interrupts</a></p>
</li>
<li>
<p><a href="using_device_pooling_in_umdf_drivers.htm">Using Device Pooling in UMDF Drivers</a></p>
<p></p>
</li>
<li>
<p>Added <b>UmdfHostProcessSharing</b>, <b>UmdfDirectHardwareAccess</b>, <b>UmdfRegisterAccessMode</b>, <b>UmdfFileObjectPolicy</b>, and <b>UmdfFsContextUsePolicy</b> directives, described in <a href="specifying_wdf_directives_in_inf_files.htm">Specifying WDF Directives in INF Files</a></p>
</li>
<li>
<p><a href="controlling_device_access.htm">Well-known security identifiers (SID) for UMDF drivers</a></p>
</li>
<li>
<p>Unified property store support, described in <a href="wdf.using_the_registry_in_umdf_drivers">Using the Registry in UMDF-based Drivers</a></p>
</li>
<li>
<p><a href="kernel.iogetdeviceobjectpointer"><b>IoGetDeviceObjectPointer</b></a> is integrated to work with UMDF. In prior versions, this routine closes the handle to the device object after taking a reference on the device’s handle. This behavior was incompatible with UMDF’s expectation that the cleanup request on the device object won’t occur until after all the I/O is complete.</p>
</li>
<li>
<p><a href="creating_umdf_hid_minidrivers.htm">Creating UMDF-based HID Minidrivers</a></p>
</li>
<li>
<p>Enhanced support for <a href="supporting_idle_power_down_in_umdf_drivers.htm">Supporting Idle Power-Down in UMDF-based Drivers</a>. 
The framework can now put the device in the D3cold power state when the idle timeout period expires. The framework can also cause the device to return to its working (D0) state when the system returns to its working (S0) state.</p>
</li>
<li>The following samples are new in UMDF 1.11: <a href="http://go.microsoft.com/fwlink/p/?linkid=256226">WudfVhidmini</a>, <a href="http://go.microsoft.com/fwlink/p/?linkid=256147">NetNfpProvider</a>.</li>
</ul>
<h2><a id="UMDF_Version_1.9"></a><a id="umdf_version_1.9"></a><a id="UMDF_VERSION_1.9"></a>UMDF Version 1.9</h2>
<p>Version 1.9 adds the following driver-supplied callback interfaces:</p>
<dl>
<dd>
<p><a href="wdf.ipnpcallbackremoteinterfacenotification">IPnpCallbackRemoteInterfaceNotification</a></p>
</dd>
<dd>
<p><a href="wdf.ipowerpolicycallbackwakefroms0">IPowerPolicyCallbackWakeFromS0</a></p>
</dd>
<dd>
<p><a href="wdf.ipowerpolicycallbackwakefromsx">IPowerPolicyCallbackWakeFromSx</a></p>
</dd>
<dd>
<p><a href="wdf.iqueuecallbackiocanceledonqueue">IQueueCallbackIoCanceledOnQueue</a></p>
</dd>
<dd>
<p><a href="wdf.iremoteinterfacecallbackevent">IRemoteInterfaceCallbackEvent</a></p>
</dd>
<dd>
<p><a href="wdf.iremoteinterfacecallbackremoval">IRemoteInterfaceCallbackRemoval</a></p>
</dd>
<dd>
<p><a href="wdf.iremotetargetcallbackremoval">IRemoteTargetCallbackRemoval</a></p>
</dd>
<dd>
<p><a href="wdf.iwdfremoteinterfaceinitialize">IWDFRemoteInterfaceInitialize</a></p>
</dd>
</dl>
<p>Version 1.9 adds the following framework-supplied interfaces:</p>
<dl>
<dd>
<p><a href="wdf.iwdfdevice2">IWDFDevice2</a></p>
</dd>
<dd>
<p><a href="wdf.iwdfdeviceinitialize2">IWDFDeviceInitialize2</a></p>
</dd>
<dd>
<p><a href="wdf.iwdffile2">IWDFFile2</a></p>
</dd>
<dd>
<p><a href="wdf.iwdfiorequest2">IWDFIoRequest2</a></p>
</dd>
<dd>
<p><a href="wdf.iwdfiotarget2">IWDFIoTarget2</a></p>
</dd>
<dd>
<p><a href="wdf.iwdfnamedpropertystore2">IWDFNamedPropertyStore2</a></p>
</dd>
<dd>
<p><a href="wdf.iwdfpropertystorefactory">IWDFPropertyStoreFactory</a></p>
</dd>
<dd>
<p><a href="wdf.iwdfremotetarget">IWDFRemoteTarget</a></p>
</dd>
<dd>
<p><a href="wdf.iwdfusbtargetpipe2">IWDFUsbTargetPipe2</a></p>
</dd>
</dl>
<p>These interfaces add the following capabilities to UMDF-based drivers:</p>
<ul>
<li>
<p><a href="general_i_o_targets_in_umdf.htm">Remote I/O targets</a></p>
</li>
<li>
<p><a href="power_policy_ownership_in_umdf.htm">Power policy ownership</a></p>
</li>
<li>
<p>The <a href="wdf.accessing_data_buffers_in_umdf_drivers">direct I/O</a> buffer access method</p>
</li>
<li>
<p><a href="wdf.working_with_usb_pipes_in_umdf">Continuous readers</a> for USB devices</p>
</li>
<li>
<p>Enhanced support for <a href="using_device_interfaces_in_umdf_drivers.htm">device interfaces</a></p>
</li>
<li>
<p>Enhanced ability to <a href="canceling_i_o_requests.htm">cancel I/O requests</a></p>
</li>
<li>
<p>Enhanced access to the <a href="wdf.using_the_registry_in_umdf_drivers">registry</a></p>
</li>
</ul>
<p> </p>
<p> </p>
<p><a href="mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback [wdf\wdf]:%20UMDF Version History%20 RELEASE:%20(3/15/2016)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AWe use your feedback to improve the documentation. We don't use your email address for any other purpose, and we'll remove your email address from our system after the issue that you're reporting is fixed. While we're working to fix this issue, we might send you an email message to ask for more info. Later, we might also send you an email message to let you know that we've addressed your feedback.%0A%0AFor more info about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx." title="Send comments about this topic to Microsoft">Send comments about this topic to Microsoft</a></p>
</div>
<p style="text-align:left;font-family:Arial,sanserif;font-size:100%;color:black">
&#x00a9;&#x00a0;2016 Microsoft. All rights reserved.</p>

</body>
</html>
