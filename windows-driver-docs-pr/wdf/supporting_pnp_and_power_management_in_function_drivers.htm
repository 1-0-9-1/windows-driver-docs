<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:mssdk="winsdk" xmlns:script="urn:script" xmlns:build="urn:build" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="Description" content="Supporting PnP and Power Management in Function Drivers"/>
<meta name="MSHAttr" content="PreferredSiteName:MSDN"/>
<meta name="MSHAttr" content="PreferredLib:/library/windows/hardware"/>
<title>Supporting PnP and Power Management in Function Drivers</title>

<meta name="MS-HAID" content="Ch4_DFPnPPackage_d7b86787-3ab1-4b6d-8aab-94cbc35ff446.xml"/>
<meta name="MS-HAID" content="kmdf.supporting_pnp_and_power_management_in_function_drivers"/>
<meta name="MS-HAID" content="wdf.supporting_pnp_and_power_management_in_function_drivers"/>


<link rel="STYLESHEET" type="text/css" HREF="../common/backsdk4.css"/>


</head>
<body>

<div id="mainSection">
<div class="clsServerSDKContent">
<h1><a id="wdf.supporting_pnp_and_power_management_in_function_drivers"></a>Supporting PnP and Power Management in Function Drivers</h1>
</div>
<p><i>Function drivers</i> control the operation of a device and therefore they access device hardware. These drivers must support PnP and power management operations and typically register several event callback functions when they <a href="creating_a_framework_device_object.htm">create device objects</a>.</p>
<p>Typically, a function driver's <a href="wdf.evtdriverdeviceadd"><i>EvtDriverDeviceAdd</i></a> event callback function calls <a href="wdf.wdfdeviceinitsetpnppowereventcallbacks"><b>WdfDeviceInitSetPnpPowerEventCallbacks</b></a> to register the following callback functions:</p>
<ul>
<li>
<p><a href="wdf.evtdevicepreparehardware"><i>EvtDevicePrepareHardware</i></a>, which delivers the device's system-assigned resources to the driver. The driver can perform operations, such as mapping the device's bus-relative memory into the processor's virtual address space, that make the hardware accessible to the driver.</p>
</li>
<li>
<p><a href="wdf.evtdeviced0entry"><i>EvtDeviceD0Entry</i></a>, which performs operations, such as loading firmware, that are needed each time that the driver's device enters its working (D0) state.</p>
</li>
<li>
<p><a href="wdf.evtdeviced0exit"><i>EvtDeviceD0Exit</i></a>, which performs operations that are needed each time that the driver's device leaves its working (D0) state and enters a low-power state.</p>
</li>
<li>
<p><a href="wdf.evtdevicereleasehardware"><i>EvtDeviceReleaseHardware</i></a>, which releases any system resources that <a href="wdf.evtdevicepreparehardware"><i>EvtDevicePrepareHardware</i></a> allocated.</p>
</li>
</ul>
<p>Like all framework-defined callback functions, the ones in the preceding list are optional. You have to supply them only if your driver needs them. </p>
<p>Function drivers can call <a href="wdf.wdfdevicesetpnpcapabilities"><b>WdfDeviceSetPnpCapabilities</b></a> and <a href="wdf.wdfdevicesetpowercapabilities"><b>WdfDeviceSetPowerCapabilities</b></a> to report a device's PnP and power management capabilities to the operating system.</p>
<p>Typically, you will use the framework's <i>power-managed I/O queues</i> for most I/O requests. If an I/O queue is power-managed, the framework delivers requests to the driver only if its device is in its working (D0) state. For more information about power-managed I/O queues, see <a href="power_management_for_i_o_queues.htm">Power Management for I/O Queues</a>.</p>
<p>Typically, the device's function driver is the <i>power policy owner</i> for the driver stack. The power policy owner determines the appropriate <a href="kernel.device_power_states">device power state</a> for a device and sends requests to the device's driver stack whenever the device's power state should change. For framework-based drivers, the framework handles this responsibility, so you do not have to provide code in your driver to request changes in a device's power state.</p>
<p>The power policy owner has two additional responsibilities: it controls a device's ability to enter a low-power state when it is idle and the system remains in its <a href="kernel.system_working_state_s0">working (S0) state</a>, and it controls the device's ability to generate a wake signal when it detects an external event from a low-power state. If your device has idle or wake capabilities, your function driver can provide additional callback functions. For more information about the responsibilities of the power policy owner, see <a href="power_policy_ownership.htm">Power Policy Ownership</a>.</p>
<p> </p>
<p> </p>
<p><a href="mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback [wdf\wdf]:%20Supporting PnP and Power Management in Function Drivers%20 RELEASE:%20(3/15/2016)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AWe use your feedback to improve the documentation. We don't use your email address for any other purpose, and we'll remove your email address from our system after the issue that you're reporting is fixed. While we're working to fix this issue, we might send you an email message to ask for more info. Later, we might also send you an email message to let you know that we've addressed your feedback.%0A%0AFor more info about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx." title="Send comments about this topic to Microsoft">Send comments about this topic to Microsoft</a></p>
</div>
<p style="text-align:left;font-family:Arial,sanserif;font-size:100%;color:black">
&#x00a9;&#x00a0;2016 Microsoft. All rights reserved.</p>

</body>
</html>
