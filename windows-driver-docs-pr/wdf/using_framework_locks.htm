<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:mssdk="winsdk" xmlns:script="urn:script" xmlns:build="urn:build" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="Description" content="Using Framework Locks"/>
<meta name="MSHAttr" content="PreferredSiteName:MSDN"/>
<meta name="MSHAttr" content="PreferredLib:/library/windows/hardware"/>
<title>Using Framework Locks</title>

<meta name="MS-HAID" content="Ch2_DFSynchandPresentation_74cb2f90-3ea3-47ae-bb7d-7ad6cc1a5da7.xml"/>
<meta name="MS-HAID" content="kmdf.using_framework_locks"/>
<meta name="MS-HAID" content="wdf.using_framework_locks"/>


<link rel="STYLESHEET" type="text/css" HREF="../common/backsdk4.css"/>


</head>
<body>

<div id="mainSection">
<div class="clsServerSDKContent">
<h1><a id="wdf.using_framework_locks"></a>Using Framework Locks</h1>
</div>
<p>Sometimes drivers must provide driver-specific synchronization of I/O request-related callback functions, either in addition to or as a replacement for framework-supplied synchronization. Drivers can use callback synchronization locks, spin locks, wait locks, and interrupt locks to synchronize driver code.</p>
<h3><a id="callback_synchronization_locks"></a><a id="CALLBACK_SYNCHRONIZATION_LOCKS"></a>Callback Synchronization Locks</h3>
<p>If you have set up your driver to use the framework's <a href="using_automatic_synchronization.htm">automatic synchronization</a> capability, the framework acquires a synchronization lock before calling the driver's I/O request-related event callback functions.</p>
<p>These <i>callback synchronization locks</i>, which are associated with framework device objects and queue objects, can also be acquired by drivers. To acquire a synchronization lock, a driver calls <a href="wdf.wdfobjectacquirelock"><b>WdfObjectAcquireLock</b></a>. To release the lock, the driver calls <a href="wdf.wdfobjectreleaselock"><b>WdfObjectReleaseLock</b></a>.</p>
<p>You might want your driver to use the callback synchronization locks if the driver uses the framework's device-level or queue-level synchronization of I/O request-related callback functions but must synchronize some code that runs at IRQL = PASSIVE_LEVEL with callback functions that run at IRQL = DISPATCH_LEVEL. This is because drivers can use automatic synchronization only for callback functions that execute at the same IRQL.</p>
<p>For example, a driver can use automatic synchronization for a work-item object only if the execution level of the work-item object's parent is <b>WdfExecutionLevelPassive</b> (because a work item's callback function always executes at IRQL= PASSIVE_LEVEL). Therefore, if a driver specifies <b>WdfExecutionLevelDispatch</b> in the <b>ExecutionLevel</b> member of a device object's <a href="wdf.wdf_object_attributes"><b>WDF_OBJECT_ATTRIBUTES</b></a> structure, the driver cannot set the <b>AutomaticSerialization</b> member of a child work-item object's configuration structure. Instead, the driver must acquire a callback synchronization lock to synchronize  the <a href="wdf.evtworkitem"><i>EvtWorkItem</i></a> callback functions with the parent device object's callback functions.</p>
<h3><a id="framework_wait_locks"></a><a id="FRAMEWORK_WAIT_LOCKS"></a>Framework Wait Locks</h3>
<p>Use framework wait locks to synchronize access to driver data from code that runs at IRQL = PASSIVE_LEVEL. Before a driver can use a framework wait lock, it must call <a href="wdf.wdfwaitlockcreate"><b>WdfWaitLockCreate</b></a> to create a wait-lock object. The driver can then call <a href="wdf.wdfwaitlockacquire"><b>WdfWaitLockAcquire</b></a> to acquire the lock and <a href="wdf.wdfwaitlockrelease"><b>WdfWaitLockRelease</b></a> to release it.</p>
<h3><a id="framework_spin_locks"></a><a id="FRAMEWORK_SPIN_LOCKS"></a>
      Framework Spin Locks</h3>
<p>Use framework spin locks to synchronize access to driver data from code that runs at IRQL &lt;= DISPATCH_LEVEL. When a driver thread acquires a spin lock, the system sets the thread's IRQL to DISPATCH_LEVEL. When the thread releases the lock, the system restores the thread's IRQL to its previous level.</p>
<p>A driver that is not using automatic framework synchronization might use a spin lock to synchronize access to a device object's context space, if the context space is writable and if more than one of the driver's event callback functions access the space.</p>
<p>Before a driver can use a framework spin lock it must call <a href="wdf.wdfspinlockcreate"><b>WdfSpinLockCreate</b></a> to create a spin-lock object. The driver can then call <a href="wdf.wdfspinlockacquire"><b>WdfSpinLockAcquire</b></a> to acquire the lock and <a href="wdf.wdfspinlockrelease"><b>WdfSpinLockRelease</b></a> to release it.</p>
<p>For an example use of spin locks, see <a href="synchronizing_cancellation_of_sent_requests.htm">Synchronizing Cancellation of Sent Requests</a>.</p>
<h3><a id="framework_interrupt_locks"></a><a id="FRAMEWORK_INTERRUPT_LOCKS"></a>Framework Interrupt Locks</h3>
<p>For interrupt objects that support DIRQL interrupt handling, framework interrupt locks are spin locks.   After your driver acquires an interrupt spin lock, the driver executes at the device's DIRQL until it releases the lock. For more information about using interrupt locks, see <a href="synchronizing_interrupt_code.htm">Synchronizing Interrupt Code</a>.</p>
<p>For interrupt objects that support passive-level handling,  framework interrupt locks are wait locks. After your driver acquires an interrupt wait lock, the driver executes at IRQL = PASSIVE_LEVEL until it releases the lock. For more information about passive-level handling, see <a href="supporting_passive_level_interrupts.htm">Supporting Passive Level Interrupts</a>.</p>
<p> </p>
<p> </p>
<p><a href="mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback [wdf\wdf]:%20Using Framework Locks%20 RELEASE:%20(3/15/2016)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AWe use your feedback to improve the documentation. We don't use your email address for any other purpose, and we'll remove your email address from our system after the issue that you're reporting is fixed. While we're working to fix this issue, we might send you an email message to ask for more info. Later, we might also send you an email message to let you know that we've addressed your feedback.%0A%0AFor more info about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx." title="Send comments about this topic to Microsoft">Send comments about this topic to Microsoft</a></p>
</div>
<p style="text-align:left;font-family:Arial,sanserif;font-size:100%;color:black">
&#x00a9;&#x00a0;2016 Microsoft. All rights reserved.</p>

</body>
</html>
