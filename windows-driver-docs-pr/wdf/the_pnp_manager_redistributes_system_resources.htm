<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:mssdk="winsdk" xmlns:script="urn:script" xmlns:build="urn:build" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="Description" content="The PnP Manager Redistributes System Resources"/>
<meta name="MSHAttr" content="PreferredSiteName:MSDN"/>
<meta name="MSHAttr" content="PreferredLib:/library/windows/hardware"/>
<title>The PnP Manager Redistributes System Resources</title>

<meta name="MS-HAID" content="Ch4_DFPnPPackage_36c5569f-0bc5-4e23-b32e-8982b6925c19.xml"/>
<meta name="MS-HAID" content="kmdf.the_pnp_manager_redistributes_system_resources"/>
<meta name="MS-HAID" content="wdf.the_pnp_manager_redistributes_system_resources"/>


<link rel="STYLESHEET" type="text/css" HREF="../common/backsdk4.css"/>


</head>
<body>

<div id="mainSection">
<div class="clsServerSDKContent">
<h1><a id="wdf.the_pnp_manager_redistributes_system_resources"></a>The PnP Manager Redistributes System Resources</h1>
</div>
<p>If a user adds a device to a system, and if the device requires system resources that the PnP manager has already assigned to another device, the PnP manager attempts to reassign resources.</p>
<p>During this process, the PnP manager stops devices and takes them out of their working (D0) states. It then delivers new resource lists to the devices so that they can restart, using the new resources.</p>
<p>When redistributing resources, the PnP manager will not alter a device's resource assignment if one of the device's drivers has:</p>
<ul>
<li>
<p>Called <a href="wdf.wdfdevicesetspecialfilesupport"><b>WdfDeviceSetSpecialFileSupport</b></a> and a special file is open on the device.</p>
</li>
<li>
<p>Called <a href="wdf.wdfdevicesetstaticstopremove"><b>WdfDeviceSetStaticStopRemove</b></a>.</p>
</li>
<li>
<p>Supplied an <a href="wdf.evtdevicequerystop"><i>EvtDeviceQueryStop</i></a> callback function, and the callback function has vetoed the reassignment.</p>
</li>
</ul>
<h3><a id="power_down_sequence"></a><a id="POWER_DOWN_SEQUENCE"></a>Power-Down Sequence</h3>
<p>For each function and filter driver that supports the device being stopped, the framework does the following, in sequence, one driver at a time, starting with the driver that is highest in the driver stack:</p>
<ol>
<li>
<p>If the driver is using self-managed I/O, the framework calls the driver's <a href="wdf.evtdeviceselfmanagediosuspend"><i>EvtDeviceSelfManagedIoSuspend</i></a>  callback function.</p>
</li>
<li>
<p>The framework stops all of the device's power-managed I/O queues.</p>
</li>
<li>
<p>If the hardware and driver support DMA, the framework calls the driver's <a href="wdf.evtdmaenablerselfmanagediostop"><i>EvtDmaEnablerSelfManagedIoStop</i></a>, <a href="wdf.evtdmaenablerflush"><i>EvtDmaEnablerFlush</i></a>, and <a href="wdf.evtdmaenablerdisable"><i>EvtDmaEnablerDisable</i></a> callback functions for each DMA channel that was created.</p>
</li>
<li>
<p>Calls the driver's <a href="wdf.evtdeviced0exitpreinterruptsdisabled"><i>EvtDeviceD0ExitPreInterruptsDisabled</i></a> and <a href="wdf.evtinterruptdisable"><i>EvtInterruptDisable</i></a> callback functions (if they exist) so that the driver can disable device interrupts.</p>
</li>
<li>
<p>The framework calls the driver's <a href="wdf.evtdeviced0exit"><i>EvtDeviceD0Exit</i></a> callback function (if it exists).</p>
</li>
<li>
<p>The framework calls the driver's <a href="wdf.evtdevicereleasehardware"><i>EvtDeviceReleaseHardware</i></a> callback function (if it exists) passing the list of hardware resources that the PnP manager has assigned to the device.</p>
</li>
</ol>
<p>The bus driver is the lowest driver in the stack and is called last. When the framework calls the bus driver's <a href="wdf.evtdeviced0exit"><i>EvtDeviceD0Exit</i></a> callback function, it passes a handle to the framework device object representing the device's PDO and a <i>TargetState</i> value of <b>WdfPowerDeviceD3Final</b>. The bus driver can control when the framework calls its <a href="wdf.evtdevicereleasehardware"><i>EvtDeviceReleaseHardware</i></a> callback function by calling <a href="wdf.wdfdeviceinitsetreleasehardwareorderonfailure"><b>WdfDeviceInitSetReleaseHardwareOrderOnFailure</b></a>.</p>
<h3><a id="power_up_sequence"></a><a id="POWER_UP_SEQUENCE"></a>Power-Up Sequence</h3>
<p>The first driver called is the bus driver. When the framework calls the bus driver's <a href="wdf.evtdeviced0entry"><i>EvtDeviceD0Entry</i></a> callback function, the callback function restores the device (a child device of the bus) to its working (D0) state.</p>
<p>For each function and filter driver that supports the device, the framework does the following, in sequence, one driver at a time, starting with the driver that is lowest in the driver stack:</p>
<ol>
<li>
<p>The framework calls the driver's <a href="wdf.evtdevicepreparehardware"><i>EvtDevicePrepareHardware</i></a> callback function (if it exists), passing the list of hardware resources that the PnP manager has assigned to the device.</p>
</li>
<li>
<p>The framework calls the driver's <a href="wdf.evtdeviced0entry"><i>EvtDeviceD0Entry</i></a> callback function (if it exists).</p>
</li>
<li>
<p>The framework calls the driver's <a href="wdf.evtinterruptenable"><i>EvtInterruptEnable</i></a> and <a href="wdf.evtdeviced0entrypostinterruptsenabled"><i>EvtDeviceD0EntryPostInterruptsEnabled</i></a> callback functions (if they exist) so that the driver can enable device interrupts.</p>
</li>
<li>
<p>If the hardware and driver support DMA, the framework calls the driver's <a href="wdf.evtdmaenablerfill"><i>EvtDmaEnablerFill</i></a>, <a href="wdf.evtdmaenablerenable"><i>EvtDmaEnablerEnable</i></a>, and <a href="wdf.evtdmaenablerselfmanagediostart"><i>EvtDmaEnablerSelfManagedIoStart</i></a> callback functions for each DMA channel that was created.</p>
</li>
<li>
<p>The framework calls the driver's <a href="wdf.evtchildlistscanforchildren"><i>EvtChildListScanForChildren</i></a> callback function (if it exists).</p>
</li>
<li>
<p>The framework restarts all of the device's power-managed I/O queues.</p>
</li>
<li>
<p>If the driver is using self-managed I/O, the framework calls the driver's <a href="wdf.evtdeviceselfmanagediorestart"><i>EvtDeviceSelfManagedIoRestart</i></a> callback function.</p>
</li>
</ol>
<p> </p>
<p> </p>
<p><a href="mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback [wdf\wdf]:%20The PnP Manager Redistributes System Resources%20 RELEASE:%20(3/15/2016)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AWe use your feedback to improve the documentation. We don't use your email address for any other purpose, and we'll remove your email address from our system after the issue that you're reporting is fixed. While we're working to fix this issue, we might send you an email message to ask for more info. Later, we might also send you an email message to let you know that we've addressed your feedback.%0A%0AFor more info about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx." title="Send comments about this topic to Microsoft">Send comments about this topic to Microsoft</a></p>
</div>
<p style="text-align:left;font-family:Arial,sanserif;font-size:100%;color:black">
&#x00a9;&#x00a0;2016 Microsoft. All rights reserved.</p>

</body>
</html>
