<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:mssdk="winsdk" xmlns:script="urn:script" xmlns:build="urn:build" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="Description" content="This topic describes actions that User-Mode Driver Framework (UMDF) and the operating system take when a UMDF driver fails. It applies to both UMDF versions 1 and 2."/>
<meta name="MSHAttr" content="PreferredSiteName:MSDN"/>
<meta name="MSHAttr" content="PreferredLib:/library/windows/hardware"/>
<title>How UMDF Handles Driver Failures</title>

<meta name="MS-HAID" content="umdfobjectdg_882d041d-67ba-4d2d-b724-ec00ead5beff.xml"/>
<meta name="MS-HAID" content="umdf.how_umdf_handles_driver_failures"/>
<meta name="MS-HAID" content="wdf.how_umdf_handles_driver_failures"/>


<link rel="STYLESHEET" type="text/css" HREF="../common/backsdk4.css"/>


</head>
<body>

<div id="mainSection">
<div class="clsServerSDKContent">
<h1><a id="wdf.how_umdf_handles_driver_failures"></a>How UMDF Handles Driver Failures</h1>
</div>
<p>This topic describes actions that User-Mode Driver Framework (UMDF) and the operating system take when a UMDF driver fails. It applies to both UMDF versions 1 and 2.</p>
<p>The following events occur in the order presented:</p>
<ul>
<li>
<p>The operating system notifies the reflector (<i>WUDFRd.sys</i>).</p>
</li>
<li>The reflector tracks outstanding I/O in the host process: <ul>
<li>The reflector completes outstanding I/O with the STATUS_DRIVER_PROCESS_TERMINATED error code.</li>
<li>Microsoft Win32 applications receive the ERROR_DRIVER_PROCESS_TERMINATED error code for the outstanding I/O.</li>
</ul>
<div class="alert"><b>Note</b>    The reflector that runs on Microsoft Windows XP completes outstanding I/O with STATUS_DRIVER_INTERNAL_ERROR, and Win32 applications, in turn, receive the ERROR_IO_DEVICE error code for the outstanding I/O. Therefore, applications that run on Windows XP should not use ERROR_IO_DEVICE to detect a driver failure because they cannot determine any difference from the status that is returned from a typical I/O request (for example, the status that is returned from a call to the Win32 <a href="base.deviceiocontrol"><b>DeviceIoControl</b></a> function).</div>
<div> </div>
</li>
<li>
<p>The reflector sends the GUID_WUDF_DEVICE_HOST_PROBLEM custom Plug and Play (PnP) event to the operating system after the operating system reports a problem with the host process.</p>
<p>If an application previously called the Win32 <b>RegisterDeviceNotification</b> function to register GUID_WUDF_DEVICE_HOST_PROBLEM for the device, that application will receive a DBT_CUSTOMEVENT notification when the host process fails. For more information about <b>RegisterDeviceNotification</b> and DBT_CUSTOMEVENT, see the Windows SDK documentation.</p>
</li>
<li>
<p>The operating system writes an entry to the system event log that indicates that the driver failed. It also indicates how many more times the operating system will restart the driver. The operating system writes the following event numbers into the system event log to indicate the specified problems:</p>
<ul>
<li>10110 if the host process was at fault</li>
<li>10111 if the device went offline and was restarted</li>
<li>10112 if the device went offline and was not restarted </li>
</ul>
<p>The framework can attempt to restart a failing driver. The UMDF code verifier provides a <a href="using_umdf_verifier.htm">registry value</a> that controls the number of restart attempts. If the user either disables and enables the device in the Device Manager or unplugs and plugs in the device, the operating system creates a new instance of the device and the framework resets the restart counter.</p>
</li>
<li>
<p>The operating system unloads the kernel drivers in the device stack. </p>
<div class="alert"><b>Note</b>    The operating system will not tear down and restart the device stack until all handles to the old stack have closed. An application will detect the device failure and a surprise removal notification for the device (DBT_REMOVEDEVICEPENDING). However, if any handle to the old stack is kept open, the device is not restarted.</div>
<div> </div>
</li>
<li>
<p>The driver manager either restarts or disables the device. If the device is disabled, the operating system displays a yellow exclamation point in Device Manager.</p>
</li>
</ul>
<p>Note that after a UMDF driver fails, the following operations can occur in an arbitrary order:</p>
<ul>
<li>
<p>The operating system tears down and restarts the device.</p>
</li>
<li>
<p>The reflector sends the GUID_WUDF_DEVICE_HOST_PROBLEM PnP event to the operating system.</p>
</li>
<li>
<p>The reflector completes outstanding I/O with STATUS_DRIVER_PROCESS_TERMINATED.</p>
</li>
</ul>
<p>Therefore, an application might receive ERROR_DRIVER_PROCESS_TERMINATED for the outstanding I/O after the operating system has restarted the device. After receiving ERROR_DRIVER_PROCESS_TERMINATED, the application might also receive the DBT_CUSTOMEVENT notification that results from the GUID_WUDF_DEVICE_HOST_PROBLEM event. </p>
<p> </p>
<p> </p>
<p><a href="mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback [wdf\wdf]:%20How UMDF Handles Driver Failures%20 RELEASE:%20(3/15/2016)&amp;body=%0A%0APRIVACY STATEMENT%0A%0AWe use your feedback to improve the documentation. We don't use your email address for any other purpose, and we'll remove your email address from our system after the issue that you're reporting is fixed. While we're working to fix this issue, we might send you an email message to ask for more info. Later, we might also send you an email message to let you know that we've addressed your feedback.%0A%0AFor more info about Microsoft's privacy policy, see http://privacy.microsoft.com/en-us/default.aspx." title="Send comments about this topic to Microsoft">Send comments about this topic to Microsoft</a></p>
</div>
<p style="text-align:left;font-family:Arial,sanserif;font-size:100%;color:black">
&#x00a9;&#x00a0;2016 Microsoft. All rights reserved.</p>

</body>
</html>
